
(*
  /!\ THIS FILE NEED BRANCH deploy-expected-cost to be checked

  /!\ Some refactoring is needed 
 
*)
require import AllCore Distr DBool PROM List StdOrder FelTactic Xreal.
(*---*) import StdBigop.Bigreal.BRA.

require import Dexcepted.
require import Dfilter.
require import Real RealSeries.
require import DistrExtras.

import Biased.
import SmtMap.
import FSet.

(* Define some necessary abstract stuff *)

type M, W, C, Z, ST, PK, SK.

op [lossless] keygen : (PK * SK) distr.
op [lossless] commit : SK -> (W * ST) distr.
op [lossless uniform] dC : C distr.
op respond : SK -> ST -> C -> Z option.

op valid_sk sk =
  exists pk, (pk, sk) \in keygen.

(* FIXME : this need to be properly defined *)
op p : real.     (* max proba of rejection *)
op eps : real.   (* max proba of = w *)

axiom p_def sk : 
  valid_sk sk => 
  mu1 (dlet (commit sk) (fun (w_st : W * ST) =>              
    dmap dC (fun (c : C) =>
      respond sk w_st.`2 c))) None <= p.

axiom p_bounded : 0%r <= p < 1%r.

axiom valid_sk_mu1_commit sk : 
  valid_sk sk => 
  forall x, mu1 (dfst (commit sk)) x <= eps.

(* This should be provable from valid_sk_mu1_commit *)
axiom eps_ge0 : 0%r <= eps. 

 (* max. number of signing queries *)
op qs : {int | 0 <= qs} as qs_ge0.
(* max. number of hash queries *)
op qh : {int | 0 <= qh} as qh_ge0.
(* max. number of iterations *)
op kappa : {int | 0 < kappa} as kappa_gt0.

lemma kappa_ge0 : 0 <= kappa 
by smt(kappa_gt0).

(*

This is some training 
op d : bool distr.

axiom d_false : mu1 d false = p.
axiom d_ll : is_lossless d.

module M = { 
  var i : int
  proc s () = { 
    var b;
    b <$ d;
    i <- i + 1;
    return b;
  }
 
  proc f () = {
    var j, b;
    b <- false;
    i <- 0;
    j <- 0;
    while (!b /\ j < kappa) { 
      b <@ s();
      j <- j + 1;
    }
    return i;
  }

}.
import var M.

op ax : bool.
ehoare eh_s  (c:real) : M.s : 
  ax `|` i%xr + 1%xr + p%xr * c%xr ==> 
  i%xr + (!res)%xr * c%xr. 
admitted.

ehoare test : M.f : (1.0 / (1.0-p))%xr ==> res%xr.
proof.
  proc.
  while ( ax `|` i%xr + (!b)%xr * (bigi predT (fun j => (p^j)) 0 (kappa - j))%xr); last first.
  + auto => /=.
    admit.
  + move=> &hr /=; apply xle_cxr_r => /> *.
    smt().
  wp.
  exlim (bigi predT (fun (j : int) => p ^ j) 0 (kappa - (j + 1))) => sum.
  conseq /(fun x => (sum = (bigi predT (fun (j : int) => p ^ j) 0 (kappa - (j + 1))) /\ ax) `|` x)
     (: ax `|` (i%xr + 1%xr + p%xr * sum%xr) ==>
        i%xr + (!b)%xr * sum%xr).
  + move=> &hr /=; apply xle_cxr => /> *.
    admit.
  + by move=> &hr; apply xle_cxr_r => />.
  call (eh_s sum); auto.
qed.
*)

clone import PROM.FullRO as RO with
  type in_t <= W * M,
  type out_t <= C,
  op dout <= (fun _ => dC)
proof *.

module type Oracle = {
  proc h(w: W, m: M) : C
  proc sign(m: M) : (W * C * Z) option
}.

module type Oracle_i = {
  include Oracle
  proc init(sk_i : SK) : unit
}.

module Count (O: Oracle_i) : Oracle = {
  var countS : int
  var countH : int

  proc init = O.init 

  proc h(w: W, m : M) : C = {
    var y;
    countH <- countH + 1;
    y <@ O.h((w, m));
    return y;
  }

  proc sign(x) = {
    var y;
    countS <- countS + 1;
    y <@ O.sign(x);
    return y;
  }
}.

module CountBound (O: Oracle_i) : Oracle = {
  import var Count

  proc init (sk : SK) = {
    O.init(sk);
    countS <- 0;
    countH <- 0;
  }
  
  proc h(w : W, m : M) : C = {
    var y;
    y <- witness;
    if (countH < qh) { 
      y <@ O.h((w, m));
      countH <- countH + 1;
    }
    return y;
  }

  proc sign(x) = {
    var y;
    y <- witness;
    if (countS < qs) { 
      y <@ O.sign(x);
      countS <- countS + 1;
    }
    return y;
  }
}.

module OLeft : Oracle_i = {
  var sk : SK

  proc init(sk_i: SK) = {
    sk <- sk_i;
  }

  proc h = RO.get

  proc sign(m: M) = {
    var w, st, c, oz, i;
    (* Silences unused variables warning *)
    w <- witness;
    c <- witness;

    i <- 0;
    oz <- None;
    while(oz = None /\ i < kappa) {
      (w, st) <$ commit sk;
      c <@ RO.get(w,m);
      oz <- respond sk st c;
      i <- i + 1;
    }
    return if oz <> None then Some (w, c, oget oz) else None;
  }
}.

(* Moving RO.set outside while-loop *)
module ORight : Oracle_i = {
  include var OLeft[init, h]

  proc sign(m: M) = {
    var w, st, c, oz, i;

    (* Silences unused variables warning *)
    w <- witness;
    c <- witness;

    i <- 0;
    oz <- None;
    while(oz = None /\ i < kappa) {
      (w, st) <$ commit sk;
      c <$ dC;
      oz <- respond sk st c;
      RO.set((w, m), c); 
      i <- i + 1;
    }
    return if oz <> None then Some (w, c, oget oz) else None;
  }
}.

module type Adversary(O: Oracle) = {
  proc distinguish(pk: PK): bool
}.

module Game (Adv: Adversary) (O: Oracle_i) = {
  proc main() = {
    var b, pk, sk;
    (pk, sk) <$ keygen;
    RO.init();
    O.init(sk);
    b <@ Adv(O).distinguish(pk);
    return b;
  }
}.

module GameI (Adv: Adversary) (O: Oracle_i) = {
  proc main() = {
    var b, pk, sk;
    (pk, sk) <$ keygen;
    RO.init();
    O.init(sk);
    Count.countS <- 0;
    Count.countH <- 0;
    b <@ Adv(O).distinguish(pk);
    return b;
  }
}.


(* This lemma should be moved to EC *)
lemma hybrid_sum_up (f: int -> real) (m n:int) : m <= n =>
  f(m) - f(n) = bigi predT (fun i => f(i) - f(i+1)) m n.
proof.
  move=> /IntOrder.ler_eqVlt [<<- | hmn].
  + by rewrite big_geq 1://; ring.
  rewrite -sumrB (big_ltn m n f) 1:// /=.
  have heq: n = n - 1 + 1 by ring.
  rewrite heq (big_int_recr (n-1) m) 1:/# -heq /=; ring.
  rewrite (big_reindex _ _ (fun x=> x - 1) (fun x=> x + 1) (range m (n - 1))) //.
  have ->: (transpose Int.(+) 1) = ((+) 1).
  + by apply: fun_ext=> x; ring.
  have ->: predT \o transpose Int.(+) (-1) = predT by done.
  by rewrite /(\o) /= -(range_addl m n 1).
qed. 

(* Move this to EC *)
lemma sum_pow (p:real) (n : int) : 0 <= n => p <> 1%r =>
  bigi predT (fun i => p^i) 0 n = (1%r - p^n) / (1%r - p).
proof.
  move=> hn hp; have := StdBigop.Bigreal.subrXX 1%r p n hn.
  rewrite RField.expr1z -(eq_big_int _ _ (fun (i : int) => p ^ i)).
  + by move=> i hi /=; rewrite RField.expr1z.
  move=> ->; field => /#.
qed.

(* Move this to EC ? *)
lemma sum_pow_le (p:real) (n : int) : 0 <= n => 0%r <= p < 1%r =>
  bigi predT (fun i => p^i) 0 n <= 1%r / (1%r - p).
proof.
  move=> hn hp; rewrite sum_pow // 1:/#.
  smt(RealOrder.expr_ge0  RealOrder.exprn_ilt1 sum_pow).
qed.

lemma sum_ipow_le (p:real) (n : int) : 0 <= n => 0%r <= p < 1%r =>
  bigi predT (fun (i:int) => i%r*p^i) 0 n <= 1%r / (1%r - p)^2.
proof.
  admit.
qed.

abstract theory Analysis.

module type Oracle_i_i = {
  include Oracle
  proc init(sk_i : SK, i:int) : unit
 }.

module type Oracle_i_ij = {
  include Oracle
  proc init(sk_i : SK, i:int, j:int) : unit
 }.

module Oi : Oracle_i_i = {
  var sk : SK
  var i_ : int
  var j_ : int
  var bad : bool
  var countS : int
  var countH : int

  proc init(sk_i:SK, i_i:int) = { 
    i_ <- i_i;
    sk <- sk_i;
    countS <- 0;
    countH <- 0;
  }

  proc h(w : W, m : M) : C = { 
    var y;
    y <- witness;
    if (countH < qh) {
      y <@ RO.get((w, m));
      countH <- countH + 1;
    }
    return y;
  }

  proc sign_i_l (m:M) = {
    var w, st, c, oz;
    (w, st) <$ commit sk;
    c <$ dC;
    oz <- respond sk st c;
    RO.set((w, m), c);
    return (w, c, oz);
  }

  proc sign_l(m : M) = { 
    var w, c, oz, j;

    (* Silences unused variables warning *)
    w <- witness;
    c <- witness;

    j <- 0;
    oz <- None;
    while(oz = None /\ j < kappa) {
      (w,c,oz) <@ sign_i_l(m);
      j <- j + 1;
    }
    return if oz <> None then Some (w, c, oget oz) else None;
  }    

  proc sign_i_r (m:M) = {
    var w, st, c, oz;
    (w, st) <$ commit sk;
    c <@ RO.get(w,m);
    oz <- respond sk st c;
    return (w, c, oz);
  }

  proc sign_r(m : M) = {
    var w, c, oz, j;
    (* Silences unused variables warning *)
    w <- witness;
    c <- witness;

    j <- 0;
    oz <- None;
    while(oz = None /\ j < kappa) {
      (w,c,oz) <@ sign_i_r(m);
      j <- j + 1;
    }
    return if oz <> None then Some (w, c, oget oz) else None;
  }

  proc sign(m : M) = {
    var r;
    r <- witness;
    if (countS < qs) {
      if (countS < i_) r <@ sign_l(m);
      else r <@ sign_r(m);
      countS <- countS + 1;
    }
    return r;
  }

}.

module Oij : Oracle_i_ij = {
  include var Oi [h]

  proc init(sk_i:SK, i_i:int, j_i:int) = { 
    i_ <- i_i;
    j_ <- j_i;
    sk <- sk_i;
    countS <- 0;
    countH <- 0;
    bad <- false;
  }

  proc sign_i_j (m:M) = {
    var w, st, c, oz;
    (w, st) <$ commit sk;
    bad <- bad \/ (w,m) \in RO.m; 
    c <$ dC;
    RO.set((w,m), c);
    oz <- respond sk st c;
    return (w, c, oz);
  }

  proc sign_i (m:M): (W * C * Z) option = {
    var w, c, oz, j;
    w <- witness;
    c <- witness;
    j <- 0;
    oz <- None;
    while(oz = None /\ j < kappa) {
      if (j < j_ - 1) (w, c, oz) <@ Oi.sign_i_l (m);
      else { if (j = j_ - 1) (w, c, oz) <@ sign_i_j (m); 
      else (w, c, oz) <@ Oi.sign_i_r (m); }
      j <- j + 1;
    }
    return if oz <> None then Some (w, c, oget oz) else None;
  }
  
  proc sign(m:M) = {
    var r;
    r <- witness;
    if (countS < qs) {
      if (countS < i_) r <@ Oi.sign_l(m);
      else { if (i_ = countS) r <@ sign_i(m);
      else r <@ Oi.sign_r(m); }
      countS <- countS + 1;
    }
    return r;
  }

}.

module Hi (Adv: Adversary) (O: Oracle_i_i) = {
  proc main(i_i:int) = {
    var b, pk, sk;
    (pk, sk) <$ keygen;
    RO.init();
    O.init(sk, i_i);
    b <@ Adv(O).distinguish(pk);
    return b;
  }
}.

module Hij (Adv: Adversary) (O: Oracle_i_ij) = {
  proc main(i_i:int, j_i:int) = {
    var b, pk, sk;
    (pk, sk) <$ keygen;
    RO.init();
    O.init(sk, i_i, j_i);
    b <@ Adv(O).distinguish(pk);
    return b;
  }
}.

section Analysis.

declare module Adv <: Adversary {-Count, -RO, -OLeft, -Oi}.

declare axiom A_ll : forall (O <: Oracle{-Adv}),
  islossless O.h =>
  islossless O.sign =>
  islossless Adv(O).distinguish.

declare axiom A_bound : forall (O <: Oracle_i{-Adv, -Count}), 
  hoare [ Adv(Count(O)).distinguish : Count.countS = 0 /\ Count.countH = 0 ==> 
                                      Count.countS <= qs /\ Count.countH <= qh ].

section C.

declare module O <: Oracle_i{-Adv, -Count}.

declare axiom Oh_ll : islossless O.h.
declare axiom Os_ll : islossless O.sign.

equiv Count_CountBound: 
  Adv(Count(O)).distinguish ~ Adv(CountBound(O)).distinguish : 
  ={arg} /\ ={glob Adv, glob Count, glob O} /\ Count.countS{1} = 0 /\ Count.countH{1} = 0 ==>
  ={res}.
proof.
  symmetry.
  conseq (: !(qs < Count.countS \/ qh < Count.countH){2} => ={arg, glob Adv, glob Count, glob O} ==>
            !(qs < Count.countS \/ qh < Count.countH){2} => ={res}) 
         _ ( A_bound O) => />; 1: smt(). 
  proc *.
  call (: qs < Count.countS \/ qh < Count.countH, ={glob Count, glob O}).
  + apply A_ll.
  + proc; sp 1 0; if{1}; 1: by wp; call(: true); auto.
    by call{2} Oh_ll; auto => /#.
  + by move=> *; islossless; apply Oh_ll.
  + by move=> _; proc; call Oh_ll; auto => /#.
  + proc; sp 1 0; if{1}; 1: by wp; call(: true); auto.
    by call{2} Os_ll; auto => /#.
  + by move=> *; islossless; apply Os_ll.
  + by move=> _; proc; call Os_ll; auto => /#.
  auto => /#.
qed.

lemma Pr_Count_CountBound &m : 
  Pr[Game(Adv, Count(O)).main() @ &m : res] =
  Pr[Game(Adv, CountBound(O)).main() @ &m : res].
proof.
  have -> : Pr[Game(Adv, Count(O)).main() @ &m : res] = Pr[GameI(Adv, Count(O)).main() @ &m : res].
  + byequiv => //; sim.
  byequiv => //; proc; call Count_CountBound. inline *; auto; sim />.
qed.

end section C.

local lemma Gleft_Hi &m : 
  Pr[Game(Adv, Count(OLeft)).main() @ &m : res] = 
  Pr[Hi(Adv, Oi).main(0) @ &m : res].
proof.
  have -> := Pr_Count_CountBound OLeft.
  + islossless. 
  + islossless. 
    while true (kappa - i).
    + move=> z; wp; conseq (:true); 1: smt(); islossless.
    by auto => /#.
  byequiv => //; proc.
  call (: ={RO.m} /\ OLeft.sk{1} = Oi.sk{2} /\ (Oi.i_ <= Oi.countS){2} /\
          Count.countS{1} = Oi.countS{2} /\ Count.countH{1} = Oi.countH{2}).
  + by sim />. 
  + proc; sp; if => //; rcondf{2} ^if; 1: auto => /#.  
    wp; conseq (: y{1} = r{2} /\ OLeft.sk{1} = Oi.sk{2} /\ ={RO.m}); 1: smt().
    call (: ={arg, RO.m} /\ OLeft.sk{1} = Oi.sk{2} ==> ={res, RO.m} /\ OLeft.sk{1} = Oi.sk{2}); 2: by auto.
    by proc; inline Oi.sign_i_r; sim.
  inline *; auto.
qed.
  
local lemma Gright_Hi &m : 
  Pr[Game(Adv, Count(ORight)).main() @ &m : res] = 
  Pr[Hi(Adv, Oi).main(qs) @ &m : res].
proof.
  have -> := Pr_Count_CountBound ORight.
  + islossless. 
  + islossless. 
    while true (kappa - i).
    + move=> z; wp; conseq (:true); 1: smt(); islossless.
    by auto => /#. 
  byequiv => //; proc. 
  call (: ={RO.m} /\ OLeft.sk{1} = Oi.sk{2} /\ Oi.i_{2} = qs /\ 
          Count.countS{1} = Oi.countS{2} /\ Count.countH{1} = Oi.countH{2}).
  + sim />.
  + proc; sp; if => //.
    rcondt{2} ^if; 1: auto => /#.
    wp; call (: ={arg, RO.m} /\ OLeft.sk{1} = Oi.sk{2} ==> ={res, RO.m} /\ OLeft.sk{1} = Oi.sk{2}); 2: by auto.
    by proc; inline Oi.sign_i_l; sim.
  by inline *; auto.
qed.

local lemma Gleft_Gright_aux &m: 
  Pr[Game(Adv, Count(OLeft)).main() @ &m : res] - 
  Pr[Game(Adv, Count(ORight)).main() @ &m : res] = 
     bigi predT (fun (i : int) => Pr[Hi(Adv, Oi).main(i) @ &m : res] - Pr[Hi(Adv, Oi).main(i+1) @ &m : res]) 0 qs.
proof.
  rewrite Gright_Hi Gleft_Hi.
  by have /= -> := (hybrid_sum_up (fun i => Pr[Hi(Adv, Oi).main(i) @ &m : res]) 0 qs qs_ge0).
qed.

(* We focus on Pr[Hi(Adv, Oi).main(i) @ &m : res ] - Pr[Hi(Adv, Oi).main(i+1) @ &m : res] *)

section I.

declare op i : int.
declare axiom i_bounded : 0 <= i < qs.

local lemma Hi_Hij &m : 
   Pr[Hi(Adv, Oi).main(i + 1) @ &m : res] = 
   Pr[Hij(Adv,Oij).main(i, kappa) @ &m : res].
proof.
  byequiv => //; proc.
  call (: ={Oi.sk, Oi.countS, Oi.countH, RO.m} /\ Oi.i_{1} = Oi.i_{2} + 1 /\ Oi.j_{2} = kappa).
  + by sim />.
  + proc; sp; if => //; wp; if{2}.
    + rcondt{1} ^if; 1: by auto => /#.
      by sim />.
    if{2}; 2: by rcondf{1} ^if; [auto=> /# | sim />].
    rcondt{1} ^if; 1: by auto => /#.  
    inline Oi.sign_l Oij.sign_i Oi.sign_i_l; wp.
    while (={m0, w, c, oz, RO.m, Oi.sk, j} /\ Oi.j_{2} = kappa); 2: by auto.
    inline RO.set Oij.sign_i_j; if{2}; 1: by auto.
    rcondt{2} ^if; auto; smt().
  by inline *; auto.
qed.

local lemma Hi1_Hij &m : 
   Pr[Hi(Adv, Oi).main(i) @ &m : res] = 
   Pr[Hij(Adv,Oij).main(i,0) @ &m : res].
proof.
  byequiv => //; proc.
  call (: ={Oi.i_, Oi.sk, Oi.countS, Oi.countH, RO.m} /\ Oi.j_{2} = 0).
  + by sim />.
  + proc; sp; if => //; wp; if => //; 1: by sim/>.
    if{2}; 2: by sim/>.
    inline Oi.sign_r Oij.sign_i; wp.
    while (={m0, w, c, j, oz, RO.m, Oi.sk} /\ (Oi.j_ <= j){2} ); last by auto.
    rcondf{2} ^if;1: auto => /#.
    inline Oij.sign_i_j Oi.sign_i_r.
    rcondf{2} ^if; auto; 1: smt().
    by conseq (: ={m0, RO.m, Oi.sk} /\  st{1} = st0{2} /\ w0{1} = w1{2} /\ c0{1} = c1{2}); 1: smt(); sim.
  by inline *; auto.   
qed.

local lemma HiHi1 &m : 
  Pr[Hi(Adv, Oi).main(i) @ &m : res] - Pr[Hi(Adv, Oi).main(i+1) @ &m : res] =
  bigi predT (fun (j : int) => Pr[Hij(Adv, Oij).main(i,j) @ &m : res] - Pr[Hij(Adv, Oij).main(i, j+1) @ &m : res]) 0 kappa.
proof.
  rewrite Hi_Hij Hi1_Hij.
  have /= -> // := (hybrid_sum_up (fun j => Pr[Hij(Adv, Oij).main(i, j) @ &m : res]) 0 kappa).
  smt(kappa_gt0).
qed.

(* We focus on Pr[Hij(Adv, Oij).main(i,j) @ &m : res] - Pr[Hij(Adv, Oij).main(i, j+1) @ &m : res] *)
section J.

declare op j : int.
declare axiom j_bounded : 0 <= j < kappa.

local lemma Oij_sign_ll : islossless Oij.sign.
proof.
  islossless. 
  + while true (kappa - j); 2: by auto => /#.
    by move=> z; wp; conseq (:true); 1: smt(); islossless.
  + while true (kappa - j); 2: by auto => /#.
    by move=> z; wp; conseq (:true); 1: smt(); islossless.
  while true (kappa - j); 2: by auto => /#.
  by move=> z; wp; conseq (:true); 1: smt(); islossless.
qed.

local lemma bad &m :   
  Pr[Hij(Adv, Oij).main(i, j) @ &m : res] <= 
  Pr[Hij(Adv, Oij).main(i,j + 1) @ &m : res] +  Pr[Hij(Adv, Oij).main(i, j + 1) @ &m : Oi.bad].
proof.
  byequiv => //; proc.
  call (: Oi.bad, 
          ={Oi.countS, Oi.countH, Oi.i_, Oi.sk, RO.m} /\ Oi.j_{1} + 1 = Oi.j_{2} /\ 0 <= Oi.j_{1} < kappa).
 (* /\ 0 <= Oi.j_{1} < kappa). *)
  + apply A_ll.
  + by sim />.
  + by move=> *; islossless.
  + by move=> *; conseq (: true); islossless.
  + proc; sp; if => //; wp.
    if => //; 1: sim />.
    if => //; last sim />.
    inline Oij.sign_i RO.set; wp.
    conseq (: !Oi.bad{2} => ={RO.m, w, c, oz}) => />; 1: smt().
    splitwhile{2} ^while : (j < Oi.j_ - 1).  
    splitwhile{1} ^while : (j < Oi.j_).
    seq 6 6 : (={RO.m, w, c, oz, j, Oi.sk, m0} /\ !Oi.bad{2} /\ Oi.j_{1} + 1 = Oi.j_{2} /\ 
               (oz = None => j = Oi.j_){1}).
    + while (={RO.m, w, c, oz, j, Oi.sk, m0} /\ !Oi.bad{2} /\ Oi.j_{1} + 1 = Oi.j_{2} /\ j{1} <= Oi.j_{1}).
      + rcondt{2} ^if => //.
        if{1}.
        + by wp; conseq (: ={RO.m, w, c, oz, j, Oi.sk, m0});1: smt(); sim.
        rcondt{1} ^if; 1: auto => /#; inline *; auto => /> /#.
      by auto => /> /#.
    unroll{1} ^while; unroll{2} ^while.
    if=> //; last first.
    + rcondf{1} ^while; 1: by auto => />.
      by rcondf{2} ^while; auto => /#.
    rcondf{1} ^if; 1: auto => /#.
    rcondf{1} ^if; 1: auto => /#.
    rcondf{2} ^if; 1: auto => /#.
    rcondt{2} ^if; 1: auto => /#.
    seq 1 1: ((!Oi.bad{2} => ={RO.m, w, c, oz}) /\ ={Oi.sk, m0, j} /\ 
               Oi.j_{1} + 1 = Oi.j_{2} /\
              (oz = None => j = Oi.j_){1}).
    + by inline *; auto => />; smt(get_setE).
    case: (Oi.bad{2}).
    + while{1} true (kappa - j{1}).
      + by auto; conseq (: true); 1: smt(); islossless.
      while{2} Oi.bad{2} (kappa - j{2}); last by auto => /#.
      move=> _ z; wp; if; last if.
      + by conseq (: true); 1: smt(); islossless.
      + by inline *; swap 3 1; wp; conseq (: true); 1: smt(); islossless.
      by conseq (: true); 1: smt(); islossless.
    case: (oz{1} = None).       
    + while( ={RO.m, j, Oi.sk, w, c, oz, m0} /\ (Oi.j_ < j){1} /\ Oi.j_{1} + 1 = Oi.j_{2}); 2: auto => /#.
      rcondf{1} ^if; 1: by auto => /#.
      rcondf{1} ^if; 1: by auto => /#.
      rcondf{2} ^if; 1: by auto => /#.
      rcondf{2} ^if; 1: by auto => /#.
      by wp; conseq (: ={RO.m, j, Oi.sk, w, c, oz, m0}) => />; 1: smt(); sim.
    rcondf{1} ^while; 1: by auto => />.
    rcondf{2} ^while; auto => /#.
  + move=> *; apply Oij_sign_ll.
  + move=> _; proc; sp; if => //; wp; if.
    + conseq />; islossless.
      while true (kappa - j); last by auto => /#.
      by move=> *; wp; conseq (: true); 1: smt(); islossless.
    if.
    + inline Oij.sign_i; auto.
      while Oi.bad (kappa - j); last by auto => /#.
      move=> *; wp; if; 1: by conseq (: true); 1: smt(); islossless.
      if; 2: by conseq (: true); 1: smt(); islossless.       
      by inline *; swap 3 1; wp; conseq (: true); 1: smt(); islossless. 
    conseq />; islossless.
    while true (kappa - j); last by auto => /#.
    by move=> *; wp; conseq (: true); 1: smt(); islossless.
  inline *; auto => />; smt(j_bounded). 
qed.

import var Oi.


lemma Ep_mu (d:'a distr) (p:'a -> bool): 
  Ep d (fun a => (p a)%xr) = (mu d p)%xr.
proof.
admitted.

lemma Ep_dlet (d:'a distr) (F: 'a -> 'b distr) f : 
  Ep (dlet d F) f = Ep d (fun x => Ep (F x) f).
proof. 
admitted.

lemma Ep_dmap (d:'a distr) (F: 'a -> 'b) (f: 'b -> xreal) : 
  Ep (dmap d F) f = Ep d (fun x => f (F x)).
proof. rewrite /dmap Ep_dlet; apply eq_Ep => x _ /=; apply Ep_dunit. qed.

lemma Ep_commit_dc_None sk : 
  Ep (commit sk)
    (fun (wst : W * ST) =>
       (mu dC (fun (c : C) => respond sk wst.`2 c = None))%xr) = 
  (mu1 (dlet (commit sk) (fun (wst : W * ST) =>              
    dmap dC (fun (c : C) => respond sk wst.`2 c))) None)%xr.
proof.
  rewrite -Ep_mu Ep_dlet; apply eq_Ep => x _ /=.
  by rewrite -Ep_mu Ep_dmap; apply eq_Ep.
qed.

ehoare ROget : RO.get : (card (fdom RO.m))%xr + 1%xr ==> (card (fdom RO.m))%xr.
proof.
  proc; auto => &hr.
  apply (xle_trans (Ep dC (fun (r:C) => ((card (fdom RO.m{hr}))%rp + 1%rp)%xr))).
  + apply le_Ep => /= c hc.
    case: (x{hr} \notin RO.m{hr}) => hin /=; 2: smt().
    by rewrite fdom_set fcardU1 mem_fdom hin /= /#. 
  by rewrite EpC dC_ll.
qed.

ehoare e_sign_i_l (c:real) : Oi.sign_i_l : 
  valid_sk sk `|` p%xr * ((card (fdom RO.m))%xr + 1%xr + c%xr) ==> 
  (res.`3 = None)%xr * ((card (fdom RO.m))%xr + c%xr). 
proof.
  proc; inline *; auto => &hr.
  apply xle_cxr_r => |> /p_def /= ?.
  apply (xle_trans 
             (((card (fdom RO.m{hr}))%rp + 1%rp + c%rp) ** 
               Ep (commit sk{hr}) (fun (w0st : W * ST) =>
                  Ep dC (fun (c0_0 : C) => (respond sk{hr} w0st.`2 c0_0 = None)%xr)))).
  + rewrite -EpsZ; apply le_Ep => x0 _ /=.
    rewrite -EpsZ; apply le_Ep => C _ /=.
    have ? /#: (card (fdom RO.m{hr}.[x0.`1, m{hr} <- C]))%r%pos <= (card (fdom RO.m{hr}))%r%pos + 1%r.
    by rewrite fdom_set fcardU1 mem_fdom /#. 
  have -> : Ep (commit sk{hr}) (fun (w0st : W * ST) =>
              Ep dC (fun (c0_0 : C) => (respond sk{hr} w0st.`2 c0_0 = None)%xr)) = 
            Ep (commit sk{hr}) (fun (w0st : W * ST) =>
              (mu dC (fun (c0_0 : C) => respond sk{hr} w0st.`2 c0_0 = None))%xr).
  + by apply eq_Ep => w0st _ /=; rewrite Ep_mu.
  rewrite Ep_commit_dc_None /=. 
  rewrite RField.mulrC; apply RealOrder.ler_pmul => //; smt(p_bounded).
qed.

ehoare e_sign_i_l_l  (c:real) : Oi.sign_i_l : 
  valid_sk sk `|` (card (fdom RO.m))%xr + 1%xr + p%xr * c%xr ==> 
  (card (fdom RO.m))%xr + (res.`3 = None)%xr * c%xr. 
proof.
  proc; inline *; auto => &hr.
  apply (xle_trans
    ( Ep (commit sk{hr}) (fun (wst : W * ST) =>
        ((card (fdom RO.m{hr}))%xr + 1%xr) + 
        c%rp ** Ep dC (fun (c0 : C) =>
          (respond sk{hr} wst.`2 c0 = None)%xr)))).
  + apply le_Ep => wst _ /=.
    have := EpC dC ((card (fdom RO.m{hr}))%xr + 1%xr).
    rewrite dC_ll /= => <-; rewrite -EpsZ -EpD; apply le_Ep => C _ /=.
    by rewrite fdom_set fcardU1 mem_fdom /#. 
  rewrite EpD EpC commit_ll /= EpsZ /=.
  have -> : Ep (commit sk{hr}) (fun (w0st : W * ST) =>
              Ep dC (fun (c0_0 : C) => (respond sk{hr} w0st.`2 c0_0 = None)%xr)) = 
            Ep (commit sk{hr}) (fun (w0st : W * ST) =>
              (mu dC (fun (c0_0 : C) => respond sk{hr} w0st.`2 c0_0 = None))%xr).
  + by apply eq_Ep => w0st _ /=; rewrite Ep_mu.
  rewrite Ep_commit_dc_None /=; apply xle_cxr_r => /p_def ? /=.
  apply RealOrder.ler_add => //; rewrite RField.mulrC.
  apply RealOrder.ler_wpmul2r; 1: smt(). 
  rewrite to_pos_pos //; smt(p_bounded).
qed.

ehoare e_sign_l : Oi.sign_l :  valid_sk sk `|` (card (fdom RO.m))%xr + (1.0 / (1.0-p))%xr ==> (card (fdom RO.m))%xr.
proof.
  proc.
  while ( valid_sk sk `|` (card (fdom RO.m))%xr + 
           (oz = None)%xr * (bigi predT (fun j => (p^j)) 0 (kappa - j))%xr); last first.
  + auto => /= &hr; apply xle_cxr => |> _.
    have /= ? := sum_pow_le p kappa kappa_ge0 p_bounded.
    apply RealOrder.ler_add => //.
    by rewrite inv_pos; apply le_pos.
  + by move=> &hr /=; apply xle_cxr_r => /> /#.
  wp.
  exlim (bigi predT (fun (j : int) => p ^ j) 0 (kappa - (j + 1))) => sum.
  conseq /(fun x => (sum = (bigi predT (fun (j : int) => p ^ j) 0 (kappa - (j + 1))) /\ valid_sk sk) `|` x)
     (: valid_sk sk  `|` ((card (fdom RO.m))%xr + 1%xr + p%xr * sum%xr) ==>
        (card (fdom RO.m))%xr + (oz=None)%xr * sum%xr).
  + move=> &hr /=; apply xle_cxr => /> *.
    rewrite -RField.addrA; apply RealOrder.ler_add => //.
    rewrite (big_ltn 0 (kappa -j{hr})) 1:/#.
    rewrite RField.expr0.
    rewrite (big_reindex _ _ (fun x=> x - 1) (fun x=> x + 1) (range 0 (kappa - (j{hr} + 1)))) //.
    have ->: (transpose Int.(+) 1) = ((+) 1).
    + by apply: fun_ext=> x; ring.
    have -> : kappa - (j{hr} + 1) = kappa - j{hr} - 1 by ring.
    rewrite -(range_addl 0 (kappa-j{hr}) 1) /(\o).
    have ? : 0%r <= p by smt(p_bounded).
    rewrite /predT !to_pos_pos //. 
    + by apply StdBigop.Bigreal.sumr_ge0 => /= *; apply RealOrder.expr_ge0.
    + by apply RealOrder.addr_ge0 => //; apply StdBigop.Bigreal.sumr_ge0 => /= *; apply RealOrder.expr_ge0.
    rewrite mulr_sumr /=; apply RealOrder.ler_add => //.
    apply StdBigop.Bigreal.ler_sum_seq => i /mem_range /= *.
    by rewrite -RField.exprS 1:/#.
  + by move=> &hr; apply xle_cxr_r => />.
  call (e_sign_i_l_l sum); auto.
qed.

ehoare e_sign_i_r : Oi.sign_i_r : bad%xr ==> bad%xr.
proof.
  proc; inline *; auto => &hr /=.
  by rewrite !EpC commit_ll dC_ll.
qed.

lemma Pr_bad &m : 
   Pr[Hij(Adv, Oij).main(i, j + 1) @ &m : bad] <= 
      p^j * (i%r / (1.0 - p) + qh%r + j%r) * eps.
proof.
  have ? := p_bounded.
  have ? : 0.0 <= (1.0 - p) by smt().
  have ? : 0.0 <= p ^ j by smt (RealOrder.expr_ge0).
  have ? := i_bounded; have ? := j_bounded; have ? := qh_ge0; have ? := eps_ge0.
  byehoare (: (arg = (i, j + 1)) `|` (p^j)%xr * (i%xr / (1.0 - p)%xr + qh%xr + j%xr) * eps%xr ==>
               bad%xr) => //; 2: by rewrite /= /#.
  proc.
  call /(fun x => x) (: 
    ((countS <= i_ => !bad) /\ j_ = j + 1 /\ i_ = i /\ valid_sk sk) `|` 
    if countS <= i_ then 
       (p^j)%xr * ((card (fdom RO.m))%xr + (i_ - countS)%xr / (1.0 - p)%xr + (qh - countH)%xr + j%xr ) * eps%xr 
    else bad%xr).
  + move=> &hr; apply xle_cxr_r => /> h.
    by case: (countS{hr} <= i) => [ /h -> /= /# | //]. 
  (* h *)
  + proc; seq 1: #pre; 1: by auto.
    if => /=; 2: by auto => &hr; apply xle_cxr.
    wp; call /(fun c =>  
      ((countS <= i_ => !bad) /\ j_ = j + 1 /\ i_ = i /\ valid_sk sk) `|`
      if countS <= i_ then
       (p ^ j)%xr * (c + (i_ - countS)%xr / (1%r - p)%xr +
                     (qh - (countH + 1))%xr + j%xr) * eps%xr
       else bad%xr) ROget; skip.
    move=> &hr; apply xle_cxr => />.
    case: (countS{hr} <= i) => //= *.
    by have -> : (qh{hr} - (countH{hr} + 1))%r%pos = (qh{hr} - countH{hr})%r%pos - 1%r; smt().
  (* sign *)
  + proc; seq 1: #pre; 1: by auto.
    if; auto; 2: by move=> &hr;apply xle_cxr => />.
    if.
    (* countS < i_ *) 
    + move=> /=.
      call /(fun x => 
       ((countS + 1 <= i_ => !bad) /\ j_ = j + 1 /\ i_ = i /\ valid_sk sk) `|`
         if countS + 1 <= i_ then
           (p ^ j)%xr * (x + (i_ - (countS + 1))%xr / (1%r - p)%xr +
              (qh - countH)%xr + j%xr) * eps%xr
        else bad%xr) e_sign_l.
     auto => &hr; apply xle_cxr => |> *.
     have /> * : (countS{hr} + 1 <= i => !bad{hr}) /\ countS{hr} + 1 <= i /\ countS{hr} <= i by smt().
     by have -> : (i - (countS{hr} + 1))%r%pos = (i - countS{hr})%r%pos - 1%r; smt(). 
   
    if.
    (* CountS = i_ *)
    + call /(fun x =>  (i = countS /\ j_ = j + 1 /\ i_ = i /\ valid_sk sk) `|` 
                       x + 
                       (p ^ j)%xr * ( (i_ - countS)%xr / (1%r - p)%xr + (qh - countH)%xr) * eps%xr)
            (: (!bad /\ i = countS /\ j_ = j + 1 /\ i_ = i /\ valid_sk sk) `|` 
                  (p ^ j)%xr * ((card (fdom RO.m))%xr + j%xr) * eps%xr 
                ==>
                bad%xr); last first.
      + by auto => &hr; apply xle_cxr => |> * /#.
      + move=> &hr /=; apply xle_cxr => />. 
        have -> /= : !(i + 1 <= i); smt().
      proc; while ( ((j <= j_ - 1 => !bad) /\ j_ = Analysis.j + 1 /\ j <= kappa /\ valid_sk sk) `|` 
              if j <= j_ - 1 then 
                let k = Analysis.j - j in
                (oz = None)%xr * (p^k)%xr * ((card (fdom RO.m))%xr + k%xr) * eps%xr
              else bad%xr); last first.
      + auto => &hr; apply xle_cxr => |> *.
        by have /> : 0 <= kappa /\ 0 <= Analysis.j by smt(). 
      + move=> &hr /=; apply xle_cxr_r => />.
        by case: (oz{hr} = None) => /= /#.
      wp; if => /=.
      (* j < j_ - 1 *)
      + conseq /(fun x =>
          ((j + 1 <= j_ - 1 => !bad) /\ j_ = Analysis.j + 1 /\ j + 1 <= kappa /\ valid_sk sk) `|`
            if j + 1 <= j_ - 1 then
              x *  (p ^ (Analysis.j - (j + 1)))%xr * eps%xr
            else bad%xr) 
          (: (valid_sk sk `|`
             p%xr * ((card (fdom RO.m))%xr + 1%xr + (Analysis.j - (j + 1))%xr)) ==>
             ((w,c,oz).`3 = None)%xr * ((card (fdom RO.m))%xr + (Analysis.j - (j + 1))%xr)).
        + move=> &hr; apply xle_cxr => |> *.
          have /> * : !bad{hr} /\ j{hr} + 1 <= kappa /\ j{hr} + 1 <= Analysis.j /\ j{hr} <= Analysis.j by smt().
          have -> : (Analysis.j - j{hr})%r%pos = (Analysis.j - (j{hr} + 1))%r%pos + 1%r by smt().
          have -> : (Analysis.j - j{hr}) = (Analysis.j - (j{hr} + 1)) + 1 by ring.
          by rewrite RField.exprS /#.
        + move=> &hr; apply xle_cxr => |> *. 
          case: (j{hr} + 1 <= Analysis.j) => // /#.
        exlim (Analysis.j - (j + 1))%r => j0.
        have h0 := e_sign_i_l j0.
        conseq (:  (valid_sk sk `|` p%xr * ((card (fdom RO.m))%xr + 1%xr + j0%xr))
                   ==> 
                   ((w, c, oz).`3 = None)%xr * ((card (fdom RO.m))%xr + j0%xr)).
        + move=> &hr; apply xle_cxr_r => ->.
          apply xle_cxr_l; trivial.
        + move=> &hr; apply xle_cxr_r => h; apply h.
        by call h0.
      if => /=.
      (* j = j_ - 1 *)
      + inline *; conseq (: bad%xr).
        + move=> &hr /=; apply xle_cxr => |> *.
          by have /> : !(Analysis.j + 1 <= Analysis.j) /\  Analysis.j + 1 <= kappa by smt().
        + move=> &hr; apply xle_cxr_r => h; apply h.
        auto => &hr; apply xle_cxr_r => |> *.
        rewrite RField.expr0 /=.
        apply (xle_trans (mu (dfst (commit sk{hr})) (fun w => w \in map fst (elems (fdom RO.m{hr}))))%xr).
        + rewrite -Ep_mu Ep_dlet; apply le_Ep => wst _ /=.
          rewrite EpC dC_ll /= Ep_dunit /= !to_pos_pos ?b2r_ge0. 
          apply le_b2r => *; rewrite mem_map_fst; exists m{hr}.
          by rewrite -memE mem_fdom.
        rewrite /= !to_pos_pos;[1:smt(fcard_ge0) | 2: apply eps_ge0].
        rewrite cardE -(size_map fst (elems (fdom RO.m{hr}))).
        by apply/mu_mem_le_mu1/valid_sk_mu1_commit.
      (* j > j_ - 1 *)
      conseq (: bad%xr ==> bad%xr).
      + move=> &hr; apply xle_cxr_r => |> *.
        apply xle_cxr_l.
        + move=> m0 oz.
          by have /> : !(j{hr} + 1 <= Analysis.j) /\ j{hr} + 1 <= kappa by smt().
        by have -> : !(j{hr} <= Analysis.j) by smt().
      + move=> &hr; apply xle_cxr_r => h; apply h.
      by call e_sign_i_r.
    conseq (: bad%xr ==> bad%xr).
    + move=> &hr /=.
      apply xle_cxr => |> *.
      have /> /= : !(countS{hr} + 1 <= i) /\ !(countS{hr} <= i) by smt().
    + move=> &hr; apply xle_cxr_r => h. 
      apply (h (RO.m{hr})).
    inline Oi.sign_r; wp.
    while (bad%xr); last by auto.
    + by move=> &hr; apply xle_cxr_r.
    by wp; call e_sign_i_r; auto => &hr; apply xle_cxr_r.
  (* initialisation *)
  inline *; auto => &hr /=; apply xle_cxr_r => />.
  rewrite fdom0 fcards0 /=. 
  apply (xle_trans (Ep keygen (fun _ => 
          (p ^ j)%xr * (i%xr / (1%r - p)%xr + qh%xr + j%xr) * eps%xr))).
  + apply le_Ep => k h /=; apply xle_cxr_l; 1: smt(). 
    by have -> : 0 <= i by smt().
  by rewrite EpC keygen_ll.  
qed.

lemma concl_j &m: 
  Pr[Hij(Adv, Oij).main(i,j) @ &m : res] - Pr[Hij(Adv, Oij).main(i, j+1) @ &m : res] <=  
      p^j * (i%r / (1.0 - p) + qh%r + j%r) * eps.
proof. move: (bad &m) (Pr_bad &m) => /#. qed.

end section J.

lemma concl_i &m : 
  Pr[Hi(Adv, Oi).main(i) @ &m : res] - Pr[Hi(Adv, Oi).main(i+1) @ &m : res] <=
     (i%r / (1%r - p) + qh%r) * eps / (1.0 - p) + eps / (1.0 - p)^2.
proof.
  apply (RealOrder.ler_trans 
      (bigi predT (fun (j : int) =>  ((i%r / (1.0 - p) + qh%r) * eps) * p^j + eps * (j%r*p^j))
                  0 kappa)).
  + rewrite (HiHi1 &m); apply StdBigop.Bigreal.ler_sum_seq => j /mem_range hj _ /=.
    by have /# := concl_j j hj &m.
  rewrite -sumrD -!mulr_sumr.
  apply RealOrder.ler_add.
  + rewrite RealOrder.ler_wpmul2l.
    + smt(i_bounded p_bounded qh_ge0 eps_ge0).
    by apply (sum_pow_le p kappa kappa_ge0 p_bounded).
  rewrite RealOrder.ler_wpmul2l 1:eps_ge0.
  apply (sum_ipow_le p kappa kappa_ge0 p_bounded).
qed.

end section I.

lemma Gleft_Gright &m: 
  Pr[Game(Adv, Count(OLeft)).main() @ &m : res] - 
  Pr[Game(Adv, Count(ORight)).main() @ &m : res] <= 
  qs%r * eps * ((qs%r + 1.0)/ (2.0 * (1.0 - p)^2) + qh%r / (1.0 - p)).
proof.
  have ? : (1%r - p) <> 0%r by smt(p_bounded).
  have ? : 1%r + (- 2%r) * p + p ^ 2 <> 0%r by smt(RField.expr2).
  apply (RealOrder.ler_trans 
     (bigi predT (fun (i : int) => i%r * eps / (1.0 -p)^2 + eps * (qh%r / (1.0 - p) + 1.0 / (1.0 - p)^2))
        0 qs)).
  + rewrite Gleft_Gright_aux; apply StdBigop.Bigreal.ler_sum_seq => i /mem_range hi _ /=.
    apply (RealOrder.ler_trans _ _ _ (concl_i i hi &m)).
    by apply RealOrder.lerr_eq; field. 
  rewrite -sumrD sumri_const 1:qs_ge0 /= RField.intmulr.
  rewrite -!mulr_suml StdBigop.Bigreal.sumidE 1:qs_ge0.
  apply RealOrder.lerr_eq; field => // /#. 
qed.

end section Analysis.

end Analysis.

(* To remove the dependency to Oi *)
section.

declare module Adv <: Adversary {-Count, -RO, -OLeft}.

declare axiom A_ll : forall (O <: Oracle{-Adv}),
  islossless O.h =>
  islossless O.sign =>
  islossless Adv(O).distinguish.

declare axiom A_bound : forall (O <: Oracle_i{-Adv, -Count}), 
  hoare [ Adv(Count(O)).distinguish : Count.countS = 0 /\ Count.countH = 0 ==> 
                                      Count.countS <= qs /\ Count.countH <= qh ].

local clone import Analysis as A.

lemma Gleft_Gright &m: 
  Pr[Game(Adv, Count(OLeft)).main() @ &m : res] - 
   Pr[Game(Adv, Count(ORight)).main() @ &m : res] <= 
   qs%r * eps * ((qs%r + 1.0)/ (2.0 * (1.0 - p)^2) + qh%r / (1.0 - p)).
proof. apply (A.Gleft_Gright Adv A_ll A_bound &m). qed.

end section.

