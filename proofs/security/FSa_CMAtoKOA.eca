(* ---------------------------------------------------------------------------------------------- 
   
   Verification of the CMA to NMA reduction for the Fiat-Shamir transform with aborts 
   
   ---------------------------------------------------------------------------------------------- *)
require import Int Real List FSet Distr RealExp SmtMap SDist StdOrder.
require import StdBigop Finite.
require import Supplementary DistrExtras.
import RealOrder Bigreal Bigreal.BRA.

require DigitalSignaturesRO PROM ReprogHybrid Collision.
require FSabort.

(* ********************* IDS based on operators ****************** *) 

(* We assume a (generic) FS+abort scheme based in operators. *)

(* ID scheme types and definitions *)
clone import FSabort as FSa. 
import FSa.ID. 

(* Generic FS+abort construction (i.e. Sig = W*Z *)
clone import FSa.Generic as FSaG. 
import DSS.
import DSS.PRO.
import DSS.DS.Stateless.

clone import OpBased as OP.

(* -- Extra assumptions on the min-entropy of commitments for (good) secret keys -- *)

op check_entropy : SK -> bool.
op gamma, alpha : real.

axiom alpha_gt0 : 0%r < alpha.
axiom gamma_gt0 : 0%r <= gamma.

axiom check_entropy_correct :
  forall sk, check_entropy sk => p_max (dfst (commit sk)) <= alpha.

axiom most_keys_high_entropy :
  mu keygen (fun k : PK * SK => !check_entropy k.`2) <= gamma.

(* Some upper bound on the rejection probability of [response] 
   for valid keys over the commitment distribution *)
op p_rej : { real | 0%r <= p_rej < 1%r } as p_rej_bounded. 

axiom rej_bound sk : check_entropy sk =>
   mu (commit sk `*` dC) 
      (fun x : (W*Pstate)*C => response sk x.`2 x.`1.`2 = None) <= p_rej. 

axiom keygen_finite : is_finite (support keygen).

(* some annoying shuffling ... *)
lemma rej_bound' sk : check_entropy sk => 
  mu1 (dlet (commit sk)
            (fun (w_st : W * Pstate) => 
             dmap dC (fun (c : C) => response sk c w_st.`2))) None <= p_rej.
proof.
move/rej_bound; apply ler_trans; rewrite dprod_dlet. 
have -> : 
  (fun (x : (W * Pstate) * C) => response sk x.`2 x.`1.`2 = None) = 
  pred1 None \o (fun (x : (W * Pstate) * C) => response sk x.`2 x.`1.`2) by smt().
rewrite -dmapE dmap_dlet; apply lerr_eq; do ! congr. 
by apply/fun_ext => -[w st] /=; rewrite dlet_dunit dmap_comp.
qed.

(* ----------------------------------------------------------------------*)
(*                           Start proof                                 *)
(* ----------------------------------------------------------------------*)

(* We will prove that, given a EUF-CMA adversary, we can actually
   break EUF-KOA. The bound (loss) of the reduction consists of the
   reprogramming bound below plus [2*gamma] for ruling our secret keys
   that do not provide sufficent entropy for hte [commit sk] *)

const reprog_bound = 
    2%r * qS%r * (qH + 1)%r * alpha / (1%r - p_rej) 
  + qS%r * alpha * (qS%r + 1%r) / (2%r * (1%r - p_rej) ^ 2).

(* The following is the actual reduction that can break EF_KOA using 
   an EF_CMA adversary. The first module is the sign oracle the reduction 
   implements, and the second module is the reduction itself. *)

module ORedKOA (Sim : HVZK_Sim) : SOracle_CMA = {
  var pk : PK
  var qs : M list
  var overlay : (W*M,C) fmap

  proc init(pki: PK) : unit = {
    pk <- pki;
    qs <- [];
    overlay <- empty;
  }

  proc sign(m: M) : Sig = {
    var sig: Sig;
    var w,c,z;
    var ot <- None;

    qs <- rcons qs m;
    while (ot = None) {  
      ot <@ Sim.get_trans(pk);
    } 
    (w,c,z) <- oget ot;
    overlay.[(w,m)] <- c;
    return (w,z);
  }
}.

module RedKOA_H' (H : Hash) = { 
  import var ORedKOA
  
  proc get(x : W*M) : C = { 
    var oc : C option;
    var c : C;

    oc <- overlay.[x];
    if (oc = None) { 
      c <@ H.get(x);
      oc <- Some c;
    }
    return oget oc;
  }
}.

module (RedKOA (A : Adv_EFCMA_RO) (Sim : HVZK_Sim) : Adv_EFKOA_RO) (H : Hash) = { 
  import var ORedKOA

  proc forge (pk : PK) : M * Sig = { 
    var m,sig;
    
    ORedKOA(Sim).init(pk);
    (m,sig) <@ A(RedKOA_H'(H),ORedKOA(Sim)).forge(pk);
    return (m,sig);
  } 
}.

(* These are two counting wrappers, one for signing oracles and one
for hash oracles, used to express the query bounds on the adversary *)

module CountS (O : SOracle_CMA) = { 
  var qs : int
  proc init() = { qs <- 0; }

  proc sign (m : M) = { 
    var s;
    qs <- qs + 1;
    s <@ O.sign(m);
    return s;
  } 
}.

module CountH (H : Hash) = { 
  var qh : int
  proc init() = { qh <- 0; }

  proc get (w,m) = { 
    var c;
    qh <- qh + 1;
    c <@ H.get(w,m);
    return c;
  } 
}.


section PROOF. 

(* We assume a CMA adversary A making at most [qH] [get] queries to
the random oracle and at most [qS] queries to the signing oracle. We
also assume that A.forge is terminating whenever all oracle calls are
terminating. *)

declare module A <: Adv_EFCMA_RO{
  -RO,-P,-V,-O_CMA_Default,-ORedKOA,-CountS,-CountH
}.

declare axiom A_query_bound 
 (SO <: SOracle_CMA{-A,-CountH, -CountS}) 
 (H <: Hash{-A,-CountH,-CountS}) : 
 hoare[ A(CountH(H),CountS(SO)).forge : 
        CountH.qh = 0 /\ CountS.qs = 0 ==> 
        CountH.qh <= qH /\ CountS.qs <= qS].

declare axiom A_ll : forall (R <: Hash{-A} ) (O <: SOracle_CMA{-A} ),
  islossless O.sign => islossless R.get => islossless A(R, O).forge.

(* We also assume a perfect HVZK simulator for the ID scheme *)

declare module Sim <: HVZK_Sim {-RO,-P,-V,-A,-ORedKOA,-CountS,-CountH}.

declare axiom Sim_perfect_HVZK k : 
  equiv [ Honest_Execution(P,V).get_trans ~ Sim.get_trans : 
          k \in keygen /\ arg{1} = k /\ arg{2} = k.`1 ==> ={res}].


module Game0 (A:Adv_EFCMA_RO,O:Oracle_CMA) = EF_CMA_RO(IDS_Sig(P,V),A,RO,O).

(* ----------------------------------------------------------------------*)
(*                            First game hop:                            *)
(* Simply replace the generic oracle by one that uses our scheme         *)
(* ----------------------------------------------------------------------*)


local module (Oracle1 : Oracle_CMA) (S : Scheme)  = {
  include var O_CMA_Default(S) [-sign]

  proc sign(m: M) : Sig = {
    var pstate;
    var sig: Sig;
    var c <- witness;
    var w <- witness;
    var oz <- None;
    qs <- rcons qs m;

    while (oz = None) { 
      (w, pstate) <$ commit sk;
      c <@ RO.get((w,m));
      oz <- response sk c pstate;
    } 
    return (w,oget oz);
  }
}.
 
(* This is basically just inlining and renaming  *)   
local lemma hop1 &m : 
  Pr [ Game0(A, O_CMA_Default).main() @ &m : res] = 
  Pr [ Game0(A, Oracle1).main() @ &m : res].
proof.
byequiv (_: ={glob A} ==> ={res}) => //. proc. inline{1} 2; inline {2} 2.
seq 4 4 : (={glob O_CMA_Default,RO.m, m, sig,pk,sk}); last by sim.
call (: ={RO.m,glob O_CMA_Default}); [|by sim|by inline*; auto].
proc; inline{1} 1; swap{1} 8 -2; wp.
while (={oz,w,m,glob O_CMA_Default, glob RO} 
       /\ sk{1} = O_CMA_Default.sk{2} 
       /\ m0{1} = m{2}); by inline*; auto => />. 
qed.


(* ----------------------------------------------------------------------*)
(*                   Third and fourth game hop:                          *)
(* Only store the ((w,m),c) pair in the oracle for accepting iteration   *)
(*                                                                       *)
(* ----------------------------------------------------------------------*)


local module (Oracle3 : Oracle_CMA) (S : Scheme)  = {
    import var O_CMA_Default(S)
    include var Oracle1(S) [-sign]

    proc sign(m: M) : Sig = {
      var pstate;
      var sig: Sig;
      var c <- witness;
      var w <- witness;
      var oz <- None;
      qs <- rcons qs m;

      while (oz = None) { 
        (w, pstate) <$ commit sk;
        c <$ dC; 
        oz <- response sk c pstate;
      } 
      RO.set((w,m),c); (* only set here  *)
      return (w,oget oz);
   }
}.

(* Juistifying this hop is the most technical part of the CMA to KOA
reduction. The argument is carried out in a dedicated [ReprogOnce]
theory which we instantiate here. *)

local clone ReprogHybrid as R1 with
  type PK <- PK,
  type SK <- SK,
  type ST <- Pstate,
  type Z <- Z,
  type M <- M,
  type W <- W,
  type C <- C,
  op dC <- dC,
  op qs <- qS,
  op qh <- qH + 1,
  op eps <- alpha,
  op p <- p_rej,
  op commit <- commit,
  op respond <- (fun sk c st => response sk st c),
  theory RO <= PRO
proof*.
realize commit_ll by apply commit_ll.
realize dC_ll by apply dC_ll.
realize dC_uni by apply dC_uni.
realize p_bounded by apply p_rej_bounded.
realize qs_ge0 by apply qS_ge0.
realize qh_ge0 by smt(qH_ge0).
realize eps_ge0 by smt(alpha_gt0).

(* Reduction to the [RedOnce] game *)
local module RedOnce (O : R1.Oracle) = { 
  module H = { 
    proc get = O.h
  }

  module SO = { 
    var qs : M list
    proc sign (m : M) = { 
      var t;
      qs <- rcons qs m;
      t <@ O.sign(m);
      return (t.`1,t.`3);
    }
  }

  proc distinguish(pk:PK) = { 
    var m : M;
    var sig : Sig;
    var nrqs : int;
    var is_valid : bool;
    var is_fresh : bool;

    SO.qs <- [];
    CountH(H).init();
    CountS(SO).init();

    (m, sig) <@ A(CountH(H),CountS(SO)).forge(pk);
    is_valid <@ IDS_Sig(P,V,CountH(H)).verify(pk, m, sig);
    is_fresh <- !(m \in SO.qs);
    nrqs <- size SO.qs;    
    return nrqs <= qS /\ is_valid /\ is_fresh;
  }
}.

import RField.

(* We use Means to average over the choice of keys *)
local clone import Means as Mkey with
  type input <- PK * SK,
  type output <- bool,
  op d <- keygen
proof*.

(* the "workers" for Means are the fixed-key versions of left and right game *)
local module GSign = { proc work = R1.Game(RedOnce,R1.OReal).main }.
local module GTrans = { proc work = R1.Game(RedOnce,R1.OSet1_inf).main }.

local lemma hop4 &m : 
     Pr [Game0(A,Oracle1).main() @ &m : res ] 
  <= Pr [Game0(A,Oracle3).main() @ &m : res ] + reprog_bound + gamma.
proof.
(* We start by expressing both sides as Rand games from Means *)
have -> : Pr[Game0(A, Oracle1).main() @ &m : res] = Pr[Rand(GSign).main() @ &m : res.`2].
- byequiv => //. proc. inline{1} 2; inline{2} 2. 
  inline RedOnce(R1.OReal).distinguish.
  swap{1} 2 -1.
  seq 4 9 : (={RO.m,m,sig,pk} /\ O_CMA_Default.qs{1} = RedOnce.SO.qs{2}); 
     last by inline*; auto; sp; if; auto => />.
  call(: ={RO.m}  
          /\ O_CMA_Default.qs{1} = RedOnce.SO.qs{2}
          /\ O_CMA_Default.sk{1} = R1.OReal.sk{2}); first last.
  + by proc; inline*; auto => /> /#.
  + by inline*; auto => />.
  proc. inline{2} 2. inline{2} 4. wp.
  while (={oz,w,RO.m} /\ m{1} = m1{2}
          /\ O_CMA_Default.qs{1} = RedOnce.SO.qs{2}
          /\ O_CMA_Default.sk{1} = R1.OReal.sk{2}).
  + by inline*; auto.
  by auto => /> /#.
have -> : Pr[Game0(A, Oracle3).main() @ &m : res] = Pr[Rand(GTrans).main() @ &m : res.`2].
- byequiv => //. proc. inline{1} 2; inline{2} 2. 
  inline RedOnce(R1.OSet1_inf).distinguish.
  swap{1} 2 -1.
  seq 4 9 : (={RO.m,m,sig,pk} /\ O_CMA_Default.qs{1} = RedOnce.SO.qs{2}); 
     last by inline*; auto; sp; if; auto => />.
  call(: ={RO.m}  
          /\ O_CMA_Default.qs{1} = RedOnce.SO.qs{2}
          /\ O_CMA_Default.sk{1} = R1.OReal.sk{2}); first last.
  + by proc; inline*; auto => /> /#.
  + inline*; auto => />.
  proc. inline{2} 2. inline{2} 4. inline RO.set. wp. 
  while (={oz,w,c,RO.m} /\ m{1} = m1{2}
          /\ O_CMA_Default.qs{1} = RedOnce.SO.qs{2}
          /\ O_CMA_Default.sk{1} = R1.OReal.sk{2}).
  + by inline*; auto.
  by auto => />.
(* Next we prove that the reduction to the distinguisher is correct
and preserves the query bounds *)
have R1_bound := R1.GReal_GSet1 RedOnce _ _.
- move => O ? ?; islossless. 
  by apply (A_ll (<: CountH(RedOnce(O).H)) (<: CountS(RedOnce(O).SO))) => //; islossless.
move => O; proc. 
seq 4 : (R1.Count.countS <= qS /\ R1.Count.countH <= qH); 
  last by by inline*; wp; call(: true); auto => /> /#.
conseq (: _ ==> CountH.qh = R1.Count.countH /\ CountS.qs = R1.Count.countS)
       (: _ ==> CountH.qh <= qH /\ CountS.qs <= qS); 1,2 : smt().
- call (A_query_bound (<: RedOnce(R1.Count(O)).SO) (<: RedOnce(R1.Count(O)).H)). 
  by inline*; auto => />.
call (: CountH.qh = R1.Count.countH /\ CountS.qs = R1.Count.countS).
- proc; inline*; auto; call(: true); auto => />.
- proc; inline*; auto; call(: true); auto => />.
by inline*; auto => />. 
(* Finally, we average over good (i.e., high entropy) and bad keys *)
have ? := keygen_finite.
pose supK := to_seq (support keygen).
pose good (k : PK * SK) := check_entropy k.`2.
have mu_goodC : mu keygen (predC good) <= gamma.
- by apply: ler_trans most_keys_high_entropy; apply mu_le => />.
pose Fl (k : PK * SK) := mu1 keygen k * Pr [ GSign.work(k) @ &m : res].
pose Fr (k : PK * SK) := mu1 keygen k * Pr [ GTrans.work(k) @ &m : res].
have -> :Pr[Rand(GSign).main() @ &m : res.`2] = big predT Fl supK.
  exact (Mean GSign &m (fun _ _ r => r) keygen_finite).
have -> : Pr[Rand(GTrans).main() @ &m : res.`2] = big predT Fr supK.
  exact (Mean GTrans &m (fun _ _ r => r) keygen_finite).
rewrite !(bigEM good). 
have -> : big good Fr supK + big (predC good) Fr supK + reprog_bound + gamma = 
          (big good Fr supK + reprog_bound) + (big (predC good) Fr supK + gamma) by ring.
apply ler_add; last first.
- apply (ler_trans gamma); last by apply/ler_paddl => //; apply/sumr_ge0; smt(mu_bounded).
  apply (ler_trans (big (predC good) (mu1 keygen) supK)); last by rewrite -fin_muE // &(mu_goodC).
  apply ler_sum => -[pk sk] @/Fl _; apply/ler_pimulr; smt(mu_bounded). 
rewrite -[reprog_bound]mulr1 -keygen_ll fin_muE // -/supK.  
apply (ler_trans (big good Fr supK + reprog_bound * big good (mu1 keygen) supK)); last first.
- rewrite ler_add2l ler_wpmul2l 1:/reprog_bound.
  rewrite addr_ge0 ?divr_ge0; smt(alpha_gt0 qH_ge0 qS_ge0 p_rej_bounded expr_ge0).
  exact sub_ler_big. 
rewrite mulr_sumr sumrD /=; apply ler_sum_seq => -[pk sk] @/good pk_sk /= chk_sk.
rewrite /Fl /Fr [reprog_bound * _]mulrC -mulrDr ler_wpmul2l // addrA.
apply (R1_bound pk sk _ _ &m) => @/has_entropy @/bound_reject [x|].
- rewrite /supK mem_to_seq // in pk_sk.
- have X := check_entropy_correct sk _; 1:smt(). 
  by apply: ler_trans X; apply pmax_upper_bound.
- exact (rej_bound' sk chk_sk).
qed.

(* ----------------------------------------------------------------------*)
(*                           Fith game hop:                             *)
(* Generate transcripts using the Honest Execution oracle for the scheme *)
(*                                                                       *)
(* ----------------------------------------------------------------------*)

(* This is no longer an Oracle_CMA, because init also takes the public key *)
local module OGame1  = {
  var sk : SK
  var pk : PK
  var qs : M list

  proc init(sk_i : SK, pk_i : PK) : unit = {
    sk <- sk_i;
    pk <- pk_i;
    qs <- [];
  }

  proc fresh(m : M) : bool = { return ! (m \in qs); }
  
  proc nr_queries() : int = { return size qs; }
  
  proc sign(m: M) : Sig = {
    var c,z;
    var w <- witness;
    var ot <- None;
    qs <- rcons qs m;

    while (ot = None) { 
      ot <@ Honest_Execution(P,V).get_trans(pk,sk);
    } 
    (w,c,z) <- oget ot;
    RO.set((w,m),c);
    return (w,z);      
   }
}.

local module Game1 (A : Adv_EFCMA_RO) = {
  proc main() : bool = {
    var pk : PK;
    var sk : SK;
    var m : M;
    var sig : Sig;
    var nrqs : int;
    var is_valid : bool;
    var is_fresh : bool;
    
    RO.init();
    (pk, sk) <$ keygen;
    OGame1.init(sk,pk); (* pass public key as well *)
    (m, sig) <@ A(RO,OGame1).forge(pk);
    is_valid <@ IDS_Sig(P,V,RO).verify(pk, m, sig);
    is_fresh <@ OGame1.fresh(m);
    nrqs <@ OGame1.nr_queries();
    
    return nrqs <= qS /\ is_valid /\ is_fresh;
  }
}.

local lemma hop5 &m : 
  Pr [Game0(A,Oracle3).main() @ &m : res ] = Pr [Game1(A).main() @ &m : res ].
proof.
byequiv (: ={glob A} ==> _) => //; proc. inline{1} 2.
seq 4 4 : (   ={m,sig,RO.m,pk,glob A} 
           /\ ={qs,sk}(O_CMA_Default,OGame1) 
           /\ pk{2} = OGame1.pk{2}); last first.
wp. conseq (: _ ==> ={nrqs,is_valid,is_fresh}). auto. sim => />.
  conseq />.
call (:  ={RO.m} /\ ={qs,sk}(O_CMA_Default,OGame1)).
- proc; inline*. conseq />. 
  wp. 
  while (={RO.m} /\ ={qs,sk}(O_CMA_Default,OGame1) 
         /\ (omap (fun z => (w,c,z)) oz){1} = ot{2}); 
  by auto => /> /#.
- by proc; inline*; auto.
by inline*; auto => />.
qed.

(* ----------------------------------------------------------------------*)
(*                          Sixth game hop:                              *)
(*      Replace the Honest Execution oracle with the Sim oracle          *)
(*                                                                       *)
(* ----------------------------------------------------------------------*)


local module OGame2  = {
  var pk : PK
  var qs : M list

  proc init(pk_i : PK) : unit = {
    pk <- pk_i;
    qs <- [];
  }

  proc fresh(m : M) : bool = { return ! (m \in qs); }
  
  proc nr_queries() : int = { return size qs; }
  
  proc sign(m: M) : Sig = {
    var c,z;
    var w <- witness;
    var ot <- None;
    qs <- rcons qs m;

    while (ot = None) { 
      ot <@ Sim.get_trans(pk);
    } 
    (w,c,z) <- oget ot;
    RO.set((w,m),c);
    return (w,z);      
   }
}.

local module Game2 (A : Adv_EFCMA_RO) = {
  proc main() : bool = {
    var pk : PK;
    var sk : SK;
    var m : M;
    var sig : Sig;
    var nrqs : int;
    var is_valid : bool;
    var is_fresh : bool;
    
    RO.init();
    (pk, sk) <$ keygen;
    OGame2.init(pk); (* pass public key only *)
    (m, sig) <@ A(RO,OGame2).forge(pk);
    is_valid <@ IDS_Sig(P,V,RO).verify(pk, m, sig);
    is_fresh <@ OGame2.fresh(m);
    nrqs <@ OGame2.nr_queries();
    
    return nrqs <= qS /\ is_valid /\ is_fresh;
  }
}.

(* We only handle the case where the HVZK advantage is actually O *)
local lemma hop6 &m : 
  Pr [Game1(A).main() @ &m : res ] = Pr [Game2(A).main() @ &m : res ].
proof.
byequiv => //; proc. 
seq 4 4 : (={RO.m, m,pk, sig} /\ ={qs}(OGame1,OGame2)); last by sim.
inline*.
call (: =   {RO.m} /\ ={qs,pk}(OGame1,OGame2)
        /\ (OGame2.pk{2},OGame1.sk{1}) \in keygen); first last.
- by proc; inline*; auto.
- by auto => /> /#.
proc. 
inline RO.set. wp. 
while (={RO.m,ot} /\ ={qs,pk}(OGame1,OGame2) 
       /\ (OGame2.pk{2},OGame1.sk{1}) \in keygen); last by auto => />.
wp; conseq (: _ ==> ={ot}); 1: smt().
exlim (OGame2.pk{2}) => pk. 
exlim (OGame1.sk{1}) => sk.
call (Sim_perfect_HVZK (pk,sk)); auto => />. 
qed.

(* ----------------------------------------------------------------------*)
(*                          Final Step:                                  *)
(*                   Reduction to the KOA (i.e., NMA) game               *)
(* ----------------------------------------------------------------------*)


(* Note that [RedKOA], beeing an adversary, only gets access to the
[get] procedure of the RO and therefore cannot reprogam the oracle in
the way the simulation game does. Thus the random oracle passed to the
CMA adversary A is hidden behind an overlay containing the
reprogramming necessary during the simulated signing queries. However,
since a successful forgery by A must be on a fresh message, any such
forgery is also a valid forgery with respect to the underlying
(unpatched) oracle.

For strong unforgeability, the argument becomes more involved, as the
adversary can hit the overlay if he manages to break comutational
unique response of the ID scheme. *)

local lemma KOA_bound &m : 
     Pr [ Game2(A).main() @ &m : res ] 
  <= Pr [ EF_KOA_RO(IDS_Sig(P,V),RedKOA(A,Sim),RO).main() @ &m : res ].
proof.
byequiv (_: ={glob RO,glob A,glob Sim} ==> res{1} => res{2}) => //.
proc; inline{2} 2. 
seq 4 3 : (={m,sig,pk} 
          /\ (RO.m{1} = (union_map ORedKOA.overlay RO.m){2})
          /\ ={qs,pk}(OGame2,ORedKOA)
          /\ forall w m, (w,m) \in ORedKOA.overlay{2} => m \in ORedKOA.qs{2}
          ).
- inline{2} 3; wp.
  call(: ={glob Sim} /\ ={pk,qs}(OGame2,ORedKOA) 
         /\ (RO.m{1} = (union_map ORedKOA.overlay RO.m){2})
         /\ forall w m, (w,m) \in ORedKOA.overlay{2} => m \in ORedKOA.qs{2}).
  + proc; inline RO.set; wp.
    while (={ot,glob Sim} /\ ={pk}(OGame2,ORedKOA)); 1: by sim. 
    auto => />; smt(mem_rcons mem_set set_union_map_l).
  + proc. wp. sp. if{2}.
    * inline*. auto => /> &1 hO c Hc. 
      smt(set_union_map_r set_union_map_l mem_union_map 
          get_setE get_set_sameE mergeE).
    * auto => />.
      smt(set_union_map_r set_union_map_l mem_union_map 
          get_setE get_set_sameE mergeE).
  by inline* ; auto => />; smt(merge_empty mem_empty).
- inline{1} 3; inline{1} 2 ; wp. 
  conseq (:_ ==> is_valid{1} /\ ! (m{1} \in OGame2.qs{1}) => is_valid{2}); 1: smt().
  inline IDS_Sig(P,V,RO).verify.
  case (m{1} \in OGame2.qs{1}); first by conseq (: ==> true); [smt()| islossless].
  conseq (: _ ==> ={is_valid}). smt(). 
  inline*; sp.
  seq 1 1 : (#pre /\ r{1} = r0{2}); first by auto.
  if; first by auto => />; smt(mem_union_map). 
  - auto => />; smt(set_union_map_r set_union_map_l mem_union_map 
                    get_setE get_set_sameE mergeE).
  - auto => />; smt(set_union_map_r set_union_map_l mem_union_map 
                    get_setE get_set_sameE mergeE).
qed.

(* ----------------------------------------------------------------------*)
(*      Final Bound for the CMA to NMA reduction                         *)
(* ----------------------------------------------------------------------*)

lemma FSabort_bound &m : 
   Pr [ EF_CMA_RO(IDS_Sig(P, V), A, RO, O_CMA_Default).main() @ &m : res] 
<= Pr [ EF_KOA_RO(IDS_Sig(P,V),RedKOA(A,Sim),RO).main() @ &m : res ] 
 + reprog_bound + gamma.
proof.
rewrite hop1.
apply (ler_trans _ _ _ (hop4 &m) _); rewrite !ler_add2r.
rewrite hop5 hop6. 
exact KOA_bound.
qed.

end section PROOF.
