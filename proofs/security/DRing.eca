(* Axiomatization of the Ring Zq[X]/(X^n + 1) and the highBits and
lowBits operations used in Dilithium *)

require import AllCore IntDiv Distr.
require Subtype.
require import Supplementary.

(* Modulo *)
op q : {int | prime q} as prime_q. 

(* Poly degrees *)
op n : {int | 0 < n} as gt0_n.

(* Polynomial ring â„¤q[X]/(X^n +1 ) *)
type Rq.

clone import Ring.ComRing as RqRing with type t <= Rq.

op cnorm : Rq -> int.             (* infinity norm (after centered reduction modulo) *)
op l1_norm : Rq -> int.           (* sum over absolute values                        *)

(* TOTHINK: If [high = Rq] is a problem, we either need to have a
ComRing structure on high or use lists rather than vectors to pass
[w1] around *)

op [lossless full uniform] dRq : Rq distr. 

lemma dRq_funi : is_funiform dRq by smt(dRq_fu dRq_uni).

op [lossless uniform] dRq_ : int -> Rq distr.
axiom supp_dRq x a : x \in dRq_ a <=> cnorm x <= a.

op [lossless uniform] dC  : int -> Rq distr.
axiom supp_dC c a : c \in dC a <=> cnorm c <= 1 /\ l1_norm c = a.

axiom cnorm_ge0 (r : Rq) : 0 <= cnorm r.
axiom cnormN (r : Rq) : cnorm (-r) = cnorm r.

(* high/low-bits operations (fixed modulus) *)

theory Flex.

type high.
op lowBits : int -> Rq -> Rq. 
op highBits : int -> Rq -> high.
op shift    : int -> high ->  Rq.

axiom high_lowP alpha x :
  2 <= alpha && alpha <= q %/ 2 =>
  2 %| alpha =>
  alpha %| (q - 1) =>
  shift alpha (highBits alpha x) + lowBits alpha x = x.

axiom hide_low alpha r s b :
  2 <= alpha && alpha <= q %/ 2 =>
  2 %| alpha =>
  alpha %| (q - 1) =>
  cnorm s <= b => cnorm (lowBits alpha r) < alpha %/ 2 - b =>
  highBits alpha (r + s) = highBits alpha r.

axiom lowbit_small alpha r :
  2 <= alpha && alpha <= q %/ 2 =>
  cnorm (lowBits alpha r) <= alpha %/ 2. (* TOTHINK: +1 ? *)

axiom shift_inj alpha :
  2 <= alpha && alpha <= q %/ 2 =>
  2 %| alpha =>
  alpha %| (q - 1) =>
  injective_in (image (highBits alpha)) (shift alpha).
end Flex.
    
abstract theory HighLow.
op alpha : int. 

axiom ge2_alpha : 2 <= alpha.
axiom alpha_halfq_le : alpha <= q %/ 2.
axiom even_alpha : 2 %| alpha.
axiom alpha_almost_divides_q : alpha %| (q - 1).

lemma rg_alpha : 2 <= alpha <= q %/ 2 by smt(ge2_alpha alpha_halfq_le).

clone import Subtype as S with 
  type T <- Flex.high,
  pred P <- image (Flex.highBits alpha).

type high = sT.

op highBits (r : Rq) = insubd (Flex.highBits alpha r).
op lowBits (r : Rq) = Flex.lowBits alpha r.
op shift (h : high) = Flex.shift alpha (val h).

lemma high_lowP x : shift (highBits x) + lowBits x = x.
proof. 
rewrite /shift /highBits /lowBits insubdK 1:/# Flex.high_lowP //.
- exact rg_alpha.
- exact even_alpha.
- exact alpha_almost_divides_q.
qed.

lemma hide_low r s b : 
  cnorm s <= b => cnorm (lowBits r) < alpha %/ 2 - b =>
  highBits (r + s) = highBits r.
proof.
move => *; rewrite /highBits (Flex.hide_low alpha r s b) //.
- exact rg_alpha.
- exact even_alpha.
- exact alpha_almost_divides_q.
qed.

lemma lowbit_small r :
  cnorm (lowBits r) <= alpha %/ 2. 
proof. by rewrite /lowsBits (Flex.lowbit_small) rg_alpha. qed.

lemma shift_inj : injective shift. 
proof.
move => x y ?.
have H : injective_in (image ((Flex.highBits alpha))) ((Flex.shift alpha)).
- apply Flex.shift_inj.
  + exact rg_alpha.
  + exact even_alpha.
  + exact alpha_almost_divides_q.
smt(val_inj valP).
qed.

end HighLow.
