require import AllCore Distr DBool PROM List.
require import Dexcepted.
require import Dfilter.
require import Real RealSeries.
require import DistrExtras.
require ReprogRej.
import Biased.
import SmtMap.

(* Define some necessary abstract stuff *)

type M, W, C, Z, ST, PK, SK.

op [lossless] keygen : (PK * SK) distr.
op [lossless] commit : SK -> (W * ST) distr.
op [lossless uniform] dC : C distr.
op respond : ST -> C -> Z option.

op valid_sk sk =
  exists pk, (pk, sk) \in keygen.

(* Needed to ensure various conditional distrs are well-formed. *)

axiom all_sk_can_accept sk :
  valid_sk sk =>
  exists w st c,
  (w, st) \in commit sk /\
  c \in dC /\
  respond st c <> None.

axiom all_sk_can_reject sk :
  valid_sk sk =>
  exists w st c,
  (w, st) \in commit sk /\
  c \in dC /\
  respond st c = None.

(* Required for transcript distrs to be always lossless *)

axiom invalid_sk_always_reject sk w st c:
  !valid_sk sk =>
  (w, st) \in commit sk =>
  c \in dC =>
  respond st c = None.

op alpha : real. (* pmax *)
op qs : int. (* max. number of signing queries *)
axiom qs_gt0 : 0 < qs.
op qh : int. (* max. number of hash queries *)
axiom qh_gt0 : 0 < qh.
op kappa : int. (* max. number of iterations *)
axiom kappa_gt0 : 0 < kappa.

(* -- Ingredients required for cloning ReprogRej -- *)

(* Transcript distribution *)
op dWCoZ sk : (W * C * Z option) distr =
  dlet (commit sk) (fun wst =>
  let (w, st) = wst in
  dlet dC (fun c =>
  let z = respond st c in
  dunit (w, c, z))).

(* Transcript distribution, conditioned on accept or reject. *)
op dWCoZ_acc sk = if valid_sk sk then
  dcond (dWCoZ sk) (fun wcz => let (w, c, z) = wcz in z <> None)
else
  dunit witness.
op dWCZ_acc sk = dmap (dWCoZ_acc sk) (fun wcoz => let (w, c, oz) = wcoz in (w, c, oget oz)).
op dWCoZ_rej sk = if valid_sk sk then
  dcond (dWCoZ sk) (fun wcz => let (w, c, z) = wcz in z = None)
else
  dunit witness.
op dWC_rej sk = dmap (dWCoZ_rej sk) (fun wcz => let (w, c, _) = wcz in (w, c)).

op dXYZ_acc (k: SK * M) : ((W * M) * C * Z) distr =
  let (sk, m) = k in
  dmap (dWCZ_acc sk) (fun wcz =>
    let (w, c, z) = wcz in ((w, m), c, z)).

op dXY_rej (k: SK * M) : ((W * M) * C) distr =
  let (sk, m) = k in
  dmap (dWC_rej sk) (fun wc =>
    let (w, c) = wc in ((w, m), c)).

axiom dX_pmax k :
  p_max (dfst (dXY_rej k)) <= alpha.

lemma dWCoZ_can_acc sk :
  valid_sk sk =>
  0%r <
  mu (dWCoZ sk)
  (fun (wcz : W * C * Top.Z option) => let (w, c, z) = wcz in z <> None).
proof.
move => H; apply all_sk_can_accept in H; case H => w st c [?[??]].
apply witness_support; exists (w, c, respond st c) => /> /=.
apply supp_dlet; exists (w, st) => />.
apply supp_dlet; exists c => />.
apply supp_dunit => /#.
qed.

lemma dWCoZ_can_rej sk :
  valid_sk sk =>
  0%r <
  mu (dWCoZ sk)
  (fun (wcz : W * C * Top.Z option) => let (w, c, z) = wcz in z = None).
proof.
move => H; apply all_sk_can_reject in H; case H => w st c [?[??]].
apply witness_support; exists (w, c, None) => /=.
apply supp_dlet; exists (w, st) => />.
apply supp_dlet; exists c => />.
apply supp_dunit => /#.
qed.

lemma dXYZ_acc_ll k :
  is_lossless (dXYZ_acc k).
proof.
case k => sk m.
case (valid_sk sk) => H.
- rewrite /dXYZ_acc /= dmap_ll dmap_ll.
  rewrite /dWCoZ_acc H /= dcond_ll.
  exact dWCoZ_can_acc.
- rewrite /dXYZ_acc /= dmap_ll dmap_ll.
  rewrite /dWCoZ_acc H /=.
  exact dunit_ll.
qed.

lemma dXY_rej_ll k :
  is_lossless (dXY_rej k).
proof.
case k => sk m.
case (valid_sk sk) => H.
- rewrite /dXY_rej /= dmap_ll dmap_ll.
  rewrite /dWCoZ_rej H /= dcond_ll.
  exact dWCoZ_can_rej.
- rewrite /dXY_rej /= dmap_ll dmap_ll.
  rewrite /dWCoZ_rej H /=.
  exact dunit_ll.
qed.

clone import ReprogRej as RRej with
  type K <- SK * M,
  type X <- W * M,
  type Y <- C,
  type Z <- Z,
  op dXYZ_acc <- dXYZ_acc,
  op dXY_rej <- dXY_rej,
  op dY <- dC,
  op qh <- qh,
  op qr <- kappa * qs,
  op alpha <- alpha
proof *.
realize dXYZ_acc_ll by apply dXYZ_acc_ll.
realize dXY_rej_ll by apply dXY_rej_ll.
realize dY_ll by apply dC_ll.
realize dY_uni by apply dC_uni.
realize dX_pmax by apply dX_pmax.
realize qh_gt0 by apply qh_gt0.
realize qr_gt0 by smt(kappa_gt0 qs_gt0).

import RRej.OnlyRej.FullRO.

module type Oracle = {
  proc h(w: W, m: M) : C
  proc sign(m: M) : W * C * Z
}.

module type Oracle_i = {
  include Oracle
  proc init() : unit
}.

module Count (O: Oracle_i) : Oracle = {
  var countS : int
  var countH : int

  proc init = O.init

  proc h(w: W, m : M) : C = {
    var y;
    countH <- countH + 1;
    y <@ O.h((w, m));
    return y;
  }

  proc sign(x) = {
    var y;
    countS <- countS + 1;
    y <@ O.sign(x);
    return y;
  }
}.

module OLeft : Oracle_i = {
  var sk : SK

  proc init() = {
    var pk;
    (pk, sk) <$ keygen;
  }

  proc h = RO.get

  proc sign(m: M) = {
    var w, st, c, oz, i;
    (* Silences unused variables warning *)
    w <- witness;
    c <- witness;

    i <- 0;
    oz <- None;
    while(oz = None /\ i < kappa) {
      (w, st) <$ commit sk;
      c <$ dC;
      oz <- respond st c;
      RO.set((w, m), c);
      i <- i + 1;
    }
    return if oz <> None then (w, c, oget oz) else witness;
  }
}.

(* Moving RO.set outside while-loop *)
module ORight : Oracle_i = {
  include var OLeft[init, h]

  proc sign(m: M) = {
    var w, st, c, oz, i;

    (* Silences unused variables warning *)
    w <- witness;
    c <- witness;

    i <- 0;
    oz <- None;
    while(oz = None /\ i < kappa) {
      (w, st) <$ commit sk;
      c <$ dC;
      oz <- respond st c;
      i <- i + 1;
    }
    if(oz <> None)
      RO.set((w, m), c);
    return if oz <> None then (w, c, oget oz) else witness;
  }
}.

module type Adversary(O: Oracle) = {
  proc distinguish(): bool
}.

module Game (Adv: Adversary) (O: Oracle_i) = {
  proc main() = {
    var b;
    RO.init();
    O.init();
    b <@ Adv(O).distinguish();
    return b;
  }
}.

(* Auxiliary lemma *)

lemma sum_over_bool (f : bool -> real):
  sum (fun b => f b) = f true + f false.
proof.
rewrite (sumE_fin _ [true; false]) /#.
qed.

lemma dWCoZ_ll sk :
  is_lossless (dWCoZ sk).
proof.
apply dlet_ll; first by apply commit_ll.
move => x; case x; move => * /=; apply dlet_ll; first apply dC_ll.
move => * /=; apply dunit_ll.
qed.

(* Accept and reject probabilities *)
op p_acc sk = mu (dWCoZ sk) (fun wcz => let (w, c, oz) = wcz in oz <> None).
op p_rej sk = mu (dWCoZ sk) (fun wcz => let (w, c, oz) = wcz in oz = None).

(* Properties of distributions above *)

lemma dWC_rej_ll sk :
  valid_sk sk =>
  is_lossless (dWC_rej sk).
proof.
move => H; apply dmap_ll.
rewrite /dWCoZ_rej H /=; apply dcond_ll.
by apply dWCoZ_can_rej => //.
qed.

lemma dWCoZ_acc_supp sk w c oz :
  valid_sk sk =>
  (w, c, oz) \in dWCoZ_acc sk =>
  oz <> None.
proof. smt(dcond_supp). qed.

lemma dWCoZ_rej_None sk w c oz :
  valid_sk sk =>
  (w, c, oz) \in dWCoZ_rej sk =>
  oz = None.
proof. smt(dcond_supp). qed.

lemma dWCoZ_rej_supp sk w c :
  valid_sk sk =>
  (w, c, None) \in dWCoZ_rej sk <=>
  (w, c) \in dWC_rej sk.
proof.
move => ?; split; first by smt(supp_dmap).
rewrite supp_dmap; smt(dWCoZ_rej_None).
qed.

lemma p_rej_E sk :
  p_rej sk = 1%r - p_acc sk.
proof.
rewrite /p_rej.
have ->: (fun wcz : (W * C * Z option)=> let (w, c, oz) = wcz in oz = None) =
      predC (fun wcz => let (w, c, oz) = wcz in oz <> None) by apply fun_ext => ? /#.
have <-: weight (dWCoZ sk) = 1%r by apply dWCoZ_ll.
rewrite mu_not; rewrite /p_acc => //.
qed.

lemma dXYZ_acc_supp_m sk m x y z :
  (x, y, z) \in dXYZ_acc (sk, m) => x.`2 = m.
proof. by rewrite /dXYZ_acc /= supp_dmap /#. qed.

lemma dXYZ_acc1E sk m w c z :
  mu1 (dXYZ_acc (sk, m)) ((w, m), c, z) = mu1 (dWCZ_acc sk) (w, c, z).
proof.
by rewrite /dXYZ_acc /= dmap1E /(\o) /=; congr => /#.
qed.

lemma dXYZ_acc_supp sk m w c z :
  (w, c, z) \in dWCZ_acc sk <=>
  ((w, m), c, z) \in dXYZ_acc (sk, m).
proof.
rewrite /dXYZ_acc /=.
split => H; first by rewrite supp_dmap => /#.
by rewrite supp_dmap in H => /#.
qed.

lemma dXY_rej_supp_m sk m x y :
  (x, y) \in dXY_rej (sk, m) => x.`2 = m.
proof. by rewrite /dXY_rej /= supp_dmap /#. qed.

lemma dXY_rej1E sk m w c :
  mu1 (dXY_rej (sk, m)) ((w, m), c) = mu1 (dWC_rej sk) (w, c).
proof.
by rewrite /dXY_rej /= dmap1E /(\o) /=; congr => /#.
qed.

lemma dXY_rej_supp sk m w c :
  (w, c) \in dWC_rej sk <=>
  ((w, m), c) \in dXY_rej (sk, m).
proof.
rewrite /dXY_rej /=.
split => H; first by rewrite supp_dmap => /#.
by rewrite supp_dmap in H => /#.
qed.

(* Now state the alternative way of sampling transcript is correct *)
lemma conditional_sampling_transcript sk :
  valid_sk sk =>
  dWCoZ sk = dlet (dbiased (p_acc sk)) (fun f =>
    if f then
      dWCoZ_acc sk
    else
      dWCoZ_rej sk).
proof.
move => H; rewrite -dmap_dbiased; first by apply dWCoZ_ll.
rewrite {1} (marginal_sampling (dWCoZ sk) (fun wcoz => let (w, c, oz) = wcoz in oz <> None)) /=.
congr; apply fun_ext => b /=; case b => _.
- rewrite /dWCoZ_acc H /=.
  congr; apply fun_ext => ? /#.
- rewrite /dWCoZ_rej H /=.
  congr; apply fun_ext => ? /#.
qed.

(* -- Lining up interface to ReprogRej -- *)

(* Helper module to call bypr... *)
module LoopBodies = {
  include var OLeft[init]
  proc body1() = {
    var w, c, oz;
    (w, c, oz) <$ dWCoZ sk;
    return (w, c, oz);
  }

  proc body2() = {
    var w, c, oz, st;
    (w, st) <$ commit sk;
    c <$ dC;
    oz <- respond st c;
    return (w, c, oz);
  }

  proc body3() = {
    var w, c, oz, f;
    f <$ dbiased (p_acc sk);
    if(f)
      (w, c, oz) <$ dWCoZ_acc sk;
    else
      (w, c, oz) <$ dWCoZ_rej sk;
    return (w, c, oz);
  }

  proc body4() = {
    var w, c, z, f;
    f <$ dbiased (p_acc sk);
    z <- witness; (* silences unused variable warning *)
    if(f)
      (w, c, z) <$ dWCZ_acc sk;
    else
      (w, c) <$ dWC_rej sk;
    return (w, c, f, z);
  }
}.

lemma pr_body1 x &m sk :
  OLeft.sk{m} = sk =>
  Pr[LoopBodies.body1() @ &m : res = x] = mu1 (dWCoZ sk) x.
proof.
move => *.
byphoare (_ : (OLeft.sk = sk) ==> (res = x)) => //=.
proc.
rnd (fun r => r = x).
auto => /#.
qed.

lemma dWCoZ_linearize sk :
  (dlet (commit sk)
        (fun (w_st : W * ST) =>
           dmap dC (fun (c0 : C) => (w_st.`1, c0, respond w_st.`2 c0)))) =
  (dmap (dWCoZ sk)
        (fun (w_c_oz : W * C * Z option) => (w_c_oz.`1, w_c_oz.`2, w_c_oz.`3))).
proof.
  rewrite /dWCoZ => /=.
  have ->: (fun (w_c_oz : W * C * Z option) => (w_c_oz.`1, w_c_oz.`2, w_c_oz.`3)) =
           (fun x => x) by smt().
  rewrite dmap_id; congr => /=.
  apply fun_ext => wst; case wst => ?? /=.
  rewrite /dmap /(\o) => /#.
qed.

equiv hop_body2 :
  LoopBodies.body1 ~ LoopBodies.body2 :
  ={OLeft.sk} ==> ={res}.
proof.
proc.
rnd: *0 *0.
auto => /> &2.
split.
- move => * /=; congr; apply dWCoZ_linearize.
- move => _ wcoz H'. rewrite dWCoZ_linearize => //.
qed.

lemma pr_body2 x &m sk :
  OLeft.sk{m} = sk =>
  Pr[LoopBodies.body2() @ &m : res = x] = mu1 (dWCoZ sk) x.
proof.
move => *.
have <- : Pr[LoopBodies.body1() @ &m : res = x] = Pr[LoopBodies.body2() @ &m : res = x].
  byequiv.
  conseq (_ : ={OLeft.sk} ==> ={res}). trivial. trivial.
  apply hop_body2. trivial. trivial.
rewrite (pr_body1 x &m sk) => /#.
qed.

equiv hop_body3 :
  LoopBodies.body2 ~ LoopBodies.body3 :
  ={OLeft.sk} /\ valid_sk OLeft.sk{1} ==> ={res}.
proof.
bypr res{1} res{2}; 1: auto => /#.
move => &1 &2 x eq_sk.
rewrite (pr_body2 x &1 OLeft.sk{1}) => //.
byphoare (_: (OLeft.sk = OLeft.sk{1}) ==> (res = x)) => //=; 2: by smt().
proc.
seq 1: f (p_acc OLeft.sk{1}) (mu1 (dWCoZ_acc OLeft.sk{1}) x) (p_rej OLeft.sk{1}) (mu1 (dWCoZ_rej OLeft.sk{1}) x) #pre => //=.
- by auto.
- rnd; auto => /> /=.
  rewrite dbiasedE => /=.
  rewrite !clamp_id => //.
- rcondt 1 => //=.
  by rnd (pred1 x); skip => /> /#.
- rnd; auto => /> /=.
  rewrite dbiasedE => /=.
  rewrite !clamp_id => //.
  by rewrite p_rej_E => //=.
- rcondf 1 => //=.
  by rnd (pred1 x); skip => /#.
- move => *; subst.
  rewrite conditional_sampling_transcript; 1: smt().
  rewrite dlet1E /=.
  rewrite sum_over_bool => /=.
  rewrite !dbiased1E => /=.
  rewrite !clamp_id => //=.
  smt(p_rej_E).
qed.

equiv hop_body4 :
  LoopBodies.body3 ~ LoopBodies.body4 :
  ={OLeft.sk} /\ valid_sk OLeft.sk{1} ==> (res{1}.`1 = res{2}.`1 /\
                         res{1}.`2 = res{2}.`2 /\
                         (res{1}.`3 <> None <=> res{2}.`3) /\
                         (res{1}.`3 <> None => oget res{1}.`3 = res{2}.`4)).
proof.
proc; auto.
seq 1 1: (#pre /\ ={f}); 1: auto.
seq 0 1: (#pre); 1: auto.
if; 1: by auto.
- rnd (fun wcoz => let (w, c, oz) = wcoz in (w, c, oget oz))
      (fun wcz => let (w, c, z) = wcz in (w, c, Some z)).
  auto => /> *.
  split => *; first smt().
  split => />.
  - move => wcz; case wcz => w c z ?.
    rewrite dmap1E.
    apply mu_eq_support => x; case x => w' c' z' H /=.
    rewrite /(\o) /pred1 => /=.
    smt(dWCoZ_acc_supp).
  - move => _ wcoz; case wcoz => ????.
    move => />; smt(dmap_supp dWCoZ_acc_supp).
- rnd (fun wcoz => let (w, c, oz) = wcoz in (w, c))
      (fun wc => let (w, c) = wc in (w, c, None)).
  auto => /> *. (* terrifying *)
  split => [|_]; first by smt().
  split => [[??] _ |_ [???]] /=; 2: smt(dWCoZ_rej_supp dWCoZ_rej_None).
  rewrite dmap1E /(\o) /pred1.
  by apply mu_eq_support; smt(dWCoZ_rej_None).
qed.

equiv hop_body2_4 :
  LoopBodies.body2 ~ LoopBodies.body4 :
  ={OLeft.sk} /\ valid_sk OLeft.sk{1} ==> (res{1}.`1 = res{2}.`1 /\
                         res{1}.`2 = res{2}.`2 /\
                         (res{1}.`3 <> None <=> res{2}.`3) /\
                         (res{1}.`3 <> None => oget res{1}.`3 = res{2}.`4)).
proof.
transitivity LoopBodies.body3
  (={OLeft.sk} /\ valid_sk OLeft.sk{1} ==> ={res})
  (={OLeft.sk} /\ valid_sk OLeft.sk{1} ==> res{1}.`1 = res{2}.`1 /\
  res{1}.`2 = res{2}.`2 /\
  (res{1}.`3 <> None <=> res{2}.`3) /\
  (res{1}.`3 <> None => oget res{1}.`3 = res{2}.`4)); 1, 2: smt().
- by apply hop_body3.
apply hop_body4.
qed.

(* -- Left game transforms -- *)

(* Loop-bodies brute-forcing spaghetti...
 * RIP signal-to-noise ratio *)

module OLeft_body2 : Oracle_i = {
  include var OLeft[init, h]

  proc sign(m: M) = {
    var w, c, oz, i;
    (* Silences unused variables warning *)
    w <- witness;
    c <- witness;

    i <- 0;
    oz <- None;
    while(oz = None /\ i < kappa) {
      (w, c, oz) <@ LoopBodies.body2();
      RO.set((w, m), c);
      i <- i + 1;
    }
    return if oz <> None then (w, c, oget oz) else witness;
  }
}.

equiv OLeft_body2_call :
  OLeft.sign ~ OLeft_body2.sign :
  ={OLeft.sk, m, RO.m} ==> ={res, RO.m}.
proof.
by proc; inline LoopBodies.body2; sim.
qed.

module OLeft_body4 : Oracle_i = {
  include var OLeft[init, h]
 
  proc sign(m: M) = {
    var w, c, f, z, i;
    (* Silences unused variables warning *)
    w <- witness;
    c <- witness;
    z <- witness;

    i <- 0;
    f <- false;
    while(!f /\ i < kappa) {
      (w, c, f, z) <@ LoopBodies.body4();
      RO.set((w, m), c);
      i <- i + 1;
    }
    return if f then (w, c, z) else witness;
  }
}.

equiv OLeft_loop_bodies_hop :
  OLeft_body2.sign ~ OLeft_body4.sign :
  ={OLeft.sk, m, RO.m} /\ valid_sk OLeft.sk{1} ==> ={res, RO.m}.
proof.
proc. seq 4 5: (#pre /\ i{1} = 0 /\ i{2} = 0 /\ oz{1} = None /\ !f{2}); first by auto.
while (={m, OLeft.sk, i, RO.m} /\ (oz{1} = None <=> !f{2})
         /\ (f{2} => (={w, c} /\ oget oz{1} = z{2})) /\ valid_sk OLeft.sk{1}); 2: by auto => /#.
wp.
call(_: ={RO.m, arg} ==> ={RO.m}).
- by proc; auto => />.
call hop_body2_4; auto => /#.
qed.

(* Replaces the transcript generation with the above *)
module OLeft_cond : Oracle_i = {
  include var OLeft[init, h]

  proc sign(m: M) = {
    var w, c, z, f, i;

    (* Silences unused variables warning *)
    w <- witness;
    c <- witness;
    z <- witness;

    i <- 0;
    f <- false;
    while(!f /\ i < kappa) {
      f <$ dbiased (p_acc sk);
      z <- witness;
      if(f)
        (w, c, z) <$ dWCZ_acc sk;
      else
        (w, c) <$ dWC_rej sk;
      RO.set((w, m), c);
      i <- i + 1;
    }
    return if f then (w, c, z) else witness;
  }
}.

equiv OLeft_cond_hop : OLeft_body4.sign ~ OLeft_cond.sign :
  ={m, OLeft.sk, RO.m} ==> ={res, RO.m}.
proof.
by proc; inline LoopBodies.body4; sim.
qed.

module OLeft_move_reprog : Oracle_i = {
  include var OLeft[init, h]

  proc sign(m: M) = {
    var w, c, z, f, i;

    (* Silences unused variables warning *)
    w <- witness;
    c <- witness;
    z <- witness;

    i <- 0;
    f <- false;
    while(!f /\ i < kappa) {
      f <$ dbiased (p_acc sk);
      z <- witness;
      if(f) {
        (w, c, z) <$ dWCZ_acc sk;
        RO.set((w, m), c);
      }
      else {
        (w, c) <$ dWC_rej sk;
        RO.set((w, m), c);
      }
      i <- i + 1;
    }
    return if f then (w, c, z) else witness;
  }
}.

equiv OLeft_move_reprog_hop :
  OLeft_cond.sign ~ OLeft_move_reprog.sign :
  ={m, OLeft.sk, RO.m} ==> ={res, RO.m}.
proof.
proc.
seq 5 5: (#pre /\ ={w, c, z} /\ i{1} = 0 /\ i{2} = 0 /\ !f{1} /\ !f{2}); first by auto.
while (={m, OLeft.sk, w, c, z, i, f, RO.m}); last by auto => />.
seq 2 2: (={m, OLeft.sk, w, c, z, i, f, RO.m}); first by sim.
if; 1: smt(); 1,2: by sim.
qed.

module OLeft_drop_rej_info : Oracle_i = {
  include var OLeft[init, h]

  proc sign(m: M) = {
    var w, wr, c, cr, z, f, i;

    (* Silences unused variables warning *)
    w <- witness;
    c <- witness;
    z <- witness;

    i <- 0;
    f <- false;
    while(!f /\ i < kappa) {
      f <$ dbiased (p_acc sk);
      z <- witness;
      if(f) {
        (w, c, z) <$ dWCZ_acc sk;
        RO.set((w, m), c);
      }
      else {
        (wr, cr) <$ dWC_rej sk;
        RO.set((wr, m), cr);
      }
      i <- i + 1;
    }
    return if f then (w, c, z) else witness;
  }
}.

equiv OLeft_drop_rej_info_hop :
  OLeft_move_reprog.sign ~ OLeft_drop_rej_info.sign :
  ={m, OLeft.sk, RO.m} ==> ={res, RO.m}.
proof.
proc.
seq 5 5: (#pre /\ ={w, c, z} /\ i{1} = 0 /\ i{2} = 0 /\ !f{1} /\ !f{2}); first by auto.
while (={m, OLeft.sk, RO.m, z, i, f} /\ (f{1} => ={w, c})); last by auto => /#.
seq 2 2: (={m, OLeft.sk, RO.m, z, i, f}); first by sim.
if; 1: smt().
- inline RO.set; auto => /#.
- inline RO.set; auto => /#.
qed.

equiv OLeft_restructure_all :
  OLeft.sign ~ OLeft_drop_rej_info.sign :
  ={m, OLeft.sk, RO.m} /\ valid_sk OLeft.sk{1} ==> ={res, RO.m}.
proof.
transitivity OLeft_body2.sign
  (={OLeft.sk, arg, RO.m} /\ valid_sk OLeft.sk{1} ==> ={res, RO.m})
  (={OLeft.sk, arg, RO.m} /\ valid_sk OLeft.sk{1} ==> ={res, RO.m}); 1, 2: smt().
- by conseq OLeft_body2_call => //.
transitivity OLeft_body4.sign
  (={OLeft.sk, arg, RO.m} /\ valid_sk OLeft.sk{1} ==> ={res, RO.m})
  (={OLeft.sk, arg, RO.m} /\ valid_sk OLeft.sk{1} ==> ={res, RO.m}); 1, 2: smt().
- by apply OLeft_loop_bodies_hop.
transitivity OLeft_cond.sign
  (={arg, OLeft.sk, RO.m} ==> ={res, RO.m})
  (={OLeft.sk, arg, RO.m} ==> ={res, RO.m}); 1, 2: smt().
- by apply OLeft_cond_hop.
transitivity OLeft_move_reprog.sign
  (={arg, OLeft.sk, RO.m} ==> ={res, RO.m})
  (={arg, OLeft.sk, RO.m} ==> ={res, RO.m}); 1, 2: smt().
- by apply OLeft_move_reprog_hop.
exact OLeft_drop_rej_info_hop.
qed.

(** -- Right game transforms -- **)

module ORight_body2 : Oracle_i = {
  include var OLeft[init, h]

  proc sign(m: M) = {
    var w, c, oz, i;
    (* Silences unused variables warning *)
    w <- witness;
    c <- witness;

    i <- 0;
    oz <- None;
    while(oz = None /\ i < kappa) {
      (w, c, oz) <@ LoopBodies.body2();
      i <- i + 1;
    }
    if(oz <> None)
      RO.set((w, m), c);
    return if oz <> None then (w, c, oget oz) else witness;
  }
}.

equiv ORight_body2_call :
  ORight.sign ~ ORight_body2.sign :
  ={OLeft.sk, m, RO.m} /\ valid_sk OLeft.sk{1} ==> ={res, RO.m}.
proof.
by proc; inline LoopBodies.body2; sim.
qed.

module ORight_body4 : Oracle_i = {
  include var OLeft[init, h]
 
  proc sign(m: M) = {
    var w, c, f, z, i;
    (* Silences unused variables warning *)
    w <- witness;
    c <- witness;
    z <- witness;

    i <- 0;
    f <- false;
    while(!f /\ i < kappa) {
      (w, c, f, z) <@ LoopBodies.body4();
      i <- i + 1;
    }
    if(f)
      RO.set((w, m), c);
    return if f then (w, c, z) else witness;
  }
}.

equiv ORight_loop_bodies_hop :
  ORight_body2.sign ~ ORight_body4.sign :
  ={OLeft.sk, m, RO.m} /\ valid_sk OLeft.sk{1} ==> ={res, RO.m}.
proof.
proc.
seq 4 5: (#pre /\ ={w, c} /\ i{1} = 0 /\ i{2} = 0 /\ oz{1} = None /\ !f{2} /\ valid_sk OLeft.sk{1}); first by auto.
seq 1 1: (={RO.m, OLeft.sk, m, w, c, i} /\ (oz{1} <> None <=> f{2}) /\
           (oz{1} <> None => oget oz{1} = z{2}) /\ valid_sk OLeft.sk{1}); last first.
- if => /> //.
  call(_: ={arg, RO.m} ==> ={RO.m}); last by auto => /#.
  by proc; auto => /#.
while(#post); last by skip => /#.
wp; call hop_body2_4; auto => /#.
qed.

(* Replaces the transcript generation with the above *)
module ORight_cond : Oracle_i = {
  include var OLeft[init, h]

  proc sign(m: M) = {
    var w, c, z, f, i;

    (* Silences unused variables warning *)
    w <- witness;
    c <- witness;
    z <- witness;

    i <- 0;
    f <- false;
    while(!f /\ i < kappa) {
      f <$ dbiased (p_acc sk);
      z <- witness;
      if(f)
        (w, c, z) <$ dWCZ_acc sk;
      else
        (w, c) <$ dWC_rej sk;
      i <- i + 1;
    }
    if(f)
      RO.set((w, m), c);
    return if f then (w, c, z) else witness;
  }
}.

equiv ORight_cond_hop : ORight_body4.sign ~ ORight_cond.sign :
  ={m, OLeft.sk, RO.m} /\ valid_sk OLeft.sk{1} ==> ={res, RO.m}.
proof.
by proc; inline LoopBodies.body4; sim.
qed.

module ORight_move_reprog : Oracle_i = {
  include var OLeft[init, h]

  proc sign(m: M) = {
    var w, c, z, f, i;

    (* Silences unused variables warning *)
    w <- witness;
    c <- witness;
    z <- witness;

    i <- 0;
    f <- false;
    while(!f /\ i < kappa) {
      f <$ dbiased (p_acc sk);
      z <- witness;
      if(f) {
        (w, c, z) <$ dWCZ_acc sk;
        RO.set((w, m), c);
      }
      else {
        (w, c) <$ dWC_rej sk;
      }
      i <- i + 1;
    }
    return if f then (w, c, z) else witness;
  }
}.

equiv ORight_move_reprog_hop :
  ORight_cond.sign ~ ORight_move_reprog.sign :
  ={m, OLeft.sk, RO.m} /\ valid_sk OLeft.sk{1} ==> ={res, RO.m}.
proof.
proc; seq 5 5: (#pre /\ ={w, c, z, i, f} /\ !f{1}); first by auto.
seq 1 1: (={m, OLeft.sk, w, c, z, i, f} /\
           (f{1} => RO.m{1}.[(w{1}, m{1}) <- c{1}] = RO.m{2}) /\
           (!f{1} => ={RO.m})).
- while (#post); last by auto => />.
  seq 2 2: (={m, OLeft.sk, w, c, z, i, f, z, RO.m}); first by sim => /#.
  if; first by smt().
  (* Not sure why these `auto` takes a few seconds... *)
  + by inline RO.set; auto.
  + by auto.
- if{1}; last by auto => />.
  by inline RO.set; auto => />.
qed.

module ORight_drop_rej_info : Oracle_i = {
  include var OLeft[init, h]

  proc sign(m: M) = {
    var w, c, z, f, i;

    (* Silences unused variables warning *)
    w <- witness;
    c <- witness;
    z <- witness;

    i <- 0;
    f <- false;
    while(!f /\ i < kappa) {
      f <$ dbiased (p_acc sk);
      z <- witness;
      if(f) {
        (w, c, z) <$ dWCZ_acc sk;
        RO.set((w, m), c);
      }
      i <- i + 1;
    }
    return if f then (w, c, z) else witness;
  }
}.

equiv ORight_drop_rej_info_hop :
  ORight_move_reprog.sign ~ ORight_drop_rej_info.sign :
  ={m, OLeft.sk, RO.m} /\ valid_sk OLeft.sk{1} ==> ={res, RO.m}.
proof.
proc.
seq 5 5: (#pre /\ ={w, c, z} /\ i{1} = 0 /\ i{2} = 0 /\ !f{1} /\ !f{2}); first by auto.
while (={m, OLeft.sk, RO.m, z, i, f} /\ valid_sk OLeft.sk{1} /\ (f{1} => ={w, c}));
  last by auto => /#.
seq 2 2: (={m, OLeft.sk, RO.m, z, i, f} /\ valid_sk OLeft.sk{1}); first by auto => />.
if; 1: smt().
- by conseq/>; sim.
- auto => />; smt(dWC_rej_ll).
qed.

equiv ORight_restructure_all :
  ORight.sign ~ ORight_drop_rej_info.sign :
  ={m, OLeft.sk, RO.m} /\ valid_sk OLeft.sk{1} ==> ={res, RO.m}.
proof.
transitivity ORight_body2.sign
  (={OLeft.sk, arg, RO.m} /\ valid_sk OLeft.sk{1} ==> ={res, RO.m})
  (={OLeft.sk, arg, RO.m} /\ valid_sk OLeft.sk{1} ==> ={res, RO.m}); 1, 2: smt().
- by apply ORight_body2_call.
transitivity ORight_body4.sign
  (={OLeft.sk, arg, RO.m} /\ valid_sk OLeft.sk{1} ==> ={res, RO.m})
  (={OLeft.sk, arg, RO.m} /\ valid_sk OLeft.sk{1} ==> ={res, RO.m}); 1, 2: smt().
- by apply ORight_loop_bodies_hop.
transitivity ORight_cond.sign
  (={arg, OLeft.sk, RO.m} /\ valid_sk OLeft.sk{1} ==> ={res, RO.m})
  (={OLeft.sk, arg, RO.m} /\ valid_sk OLeft.sk{1} ==> ={res, RO.m}); 1, 2: smt().
- by apply ORight_cond_hop.
transitivity ORight_move_reprog.sign
  (={arg, OLeft.sk, RO.m} /\ valid_sk OLeft.sk{1} ==> ={res, RO.m})
  (={arg, OLeft.sk, RO.m} /\ valid_sk OLeft.sk{1} ==> ={res, RO.m}); 1, 2: smt().
- by apply ORight_move_reprog_hop.
exact ORight_drop_rej_info_hop.
qed.

(** -- Reduction to ReprogRej -- **)

module OReduction(O: RRej.Oracle) : Oracle_i = {
  include var OLeft[init]

  proc h = O.h

  proc sign(m: M) = {
    var w, c, z, f, i, wm, m';

    (* Silences unused variables warning *)
    w <- witness;
    c <- witness;
    z <- witness;

    i <- 0;
    f <- false;
    while(!f /\ i < kappa) {
      f <$ dbiased (p_acc sk);
      z <- witness;
      if(f) {
        (wm, c, z) <@ O.reprog_acc((OLeft.sk, m));
        (w, m') <- wm;
      }
      else {
        O.reprog_rej((OLeft.sk, m));
      }
      i <- i + 1;
    }
    return if f then (w, c, z) else witness;
  }
}.

section.

declare module Adv <: Adversary {-OLeft, -Count, -RRej.Count, -RO, -ORight_rec}.

declare axiom A_bound : forall (O <: Oracle_i{-Adv}), 
  hoare [ Adv(Count(O)).distinguish : Count.countS = 0 /\ Count.countH = 0 ==> 
                                      Count.countS <= qs /\ Count.countH <= qh ].

declare axiom A_ll : forall (O <: Oracle),
  islossless O.h =>
  islossless O.sign =>
  islossless Adv(O).distinguish.

lemma ReductionO_ll : forall (O <: RRej.Oracle),
  islossless O.h =>
  islossless O.reprog_acc =>
  islossless O.reprog_rej =>
  islossless OReduction(O).h /\ islossless OReduction(O).sign.
proof.
admitted.

module (Reduction : RRej.Adversary) (ORej: RRej.Oracle) = {
  proc distinguish() = {
    var b; 
    OReduction(ORej).init();
    b <@ Adv(OReduction(ORej)).distinguish();
    return b;
  }
}.

lemma Reduction_ll : forall (O <: RRej.Oracle),
  islossless O.h =>
  islossless O.reprog_acc =>
  islossless O.reprog_rej =>
  islossless Reduction(O).distinguish.
proof.
admitted.

module (ReductionCount : RRej.Adversary) (ORej: RRej.Oracle) = {
  proc distinguish() = {
    var b; 
    Count(OReduction(ORej)).init();
    b <@ Adv(Count(OReduction(ORej))).distinguish();
    return b;
  }
}.

lemma ReductionCount_bound : forall (ORej <: RRej.Oracle{-Adv}),
  hoare[ ReductionCount(ORej).distinguish :
    Count.countS = 0 /\ Count.countH = 0 ==> 
    Count.countS <= qs /\ Count.countH <= qh ].
proof.
move => ORej; proc.
inline Count(OReduction(ORej)).init.
seq 1: #pre; 1: by auto.
by call (A_bound (OReduction(ORej))) => //.
qed.

lemma ReductionCount_hop : forall (ORej <: RRej.Oracle{-Adv, -RRej.Count, -Count, -OLeft}),
  equiv[Reduction(RRej.Count(ORej)).distinguish ~
        ReductionCount(ORej).distinguish :
    ={glob Adv, glob ORej, glob OLeft, glob RO} /\
    RRej.Count.countH{1} = 0 /\
    RRej.Count.countR{1} = 0 /\
    Count.countH{2} = 0 /\
    Count.countS{2} = 0 ==>
    RRej.Count.countH{1} = Count.countH{2} /\
    RRej.Count.countR{1} <= kappa * Count.countS{2}].
proof.
move => ORej; proc.
inline OReduction(RRej.Count(ORej)).init.
seq 1 1: #pre; 1: by auto.
call (_: ={glob ORej, glob OLeft, glob RO} /\ RRej.Count.countH{1} = Count.countH{2} /\
         RRej.Count.countR{1} <= kappa * Count.countS{2}); last by auto.
- proc.
  seq 1 1: #pre; 1: by auto.
  call(_: ={arg, glob ORej, glob RO} ==> ={res, glob ORej, glob RO}); first by sim.
  by auto => //.
- proc; inline OReduction(ORej).sign.
  (* don't sp or you'll see something terrifying *)
  wp; seq 5 7: (={glob ORej, glob OLeft, glob RO, w, c, z, i, f, m} /\
    i{1} = 0 /\
    RRej.Count.countH{1} = Count.countH{2} /\
    RRej.Count.countR{1} + kappa <= kappa * Count.countS{2}); first by auto => /#.
  while(={glob ORej, glob OLeft, glob RO, w, c, z, i, f, m} /\
    0 <= i{1} <= kappa /\
    RRej.Count.countH{1} = Count.countH{2} /\
    RRej.Count.countR{1} + kappa - i{1} <= kappa * Count.countS{2});
    last by skip => />; smt(kappa_gt0).
  seq 2 2: (={glob ORej, glob RO, OLeft.sk, w, c, z, i, f, m} /\
            (0 <= i{1} /\ i{1} < kappa) /\
             RRej.Count.countH{1} = Count.countH{2} /\
             RRej.Count.countR{1} + kappa - i{1} <= kappa * Count.countS{2}).
  + by auto => />.
  if; first by smt().
  + inline RRej.Count(ORej).reprog_acc.
    sp; wp; call(_: ={arg, glob ORej, glob RO} ==> ={res, glob ORej, glob RO}); first by sim.
    by skip => />; smt(kappa_gt0).
  + inline RRej.Count(ORej).reprog_rej.
    sp; wp; call(_: ={arg, glob ORej, glob RO} ==> ={res, glob ORej, glob RO}); first by sim.
    by skip => />; smt(kappa_gt0).
qed.

lemma Reduction_bound : forall (RejO <: RRej.Oracle{-Adv, -RRej.Count, -Count, -OLeft}), 
  hoare [ Reduction(RRej.Count(RejO)).distinguish :
    RRej.Count.countR = 0 /\ RRej.Count.countH = 0 ==> 
    RRej.Count.countR <= kappa * qs /\ RRej.Count.countH <= qh ].
proof.
move => RejO.
conseq (ReductionCount_hop RejO) (ReductionCount_bound RejO); smt(kappa_gt0).
qed.

equiv reduction_correct_left :
  Game(Adv, OLeft).main ~ RRej.Game(RRej.OLeft, Reduction).main :
  ={glob Adv} ==> ={res}.
proof.
proc.
inline RO.init OLeft.init RRej.OLeft.init Reduction(RRej.OLeft).distinguish.
wp; seq 2 2: (#pre /\ ={RO.m} /\ ={OLeft.sk} /\ valid_sk OLeft.sk{1}); first by rnd; auto => /> /#.
call (_ : ={RO.m, OLeft.sk} /\ valid_sk OLeft.sk{1}); last by skip => />.
- by proc; inline RO.get; auto.
- transitivity OLeft_drop_rej_info.sign
  (={OLeft.sk, arg, RO.m} /\ valid_sk OLeft.sk{1} ==> ={res, RO.m, OLeft.sk} /\ valid_sk OLeft.sk{1})
  (={OLeft.sk, arg, RO.m} /\ valid_sk OLeft.sk{1} ==> ={res, RO.m, OLeft.sk} /\ valid_sk OLeft.sk{1});
    1, 2: smt().
  + conseq OLeft_restructure_all; 1, 2: smt().
  proc; conseq/>.
  seq 5 5: (#pre /\ ={w, c, z, i, f}); 1: by auto.
  while(#pre); last by skip => />.
  seq 2 2: (={OLeft.sk, m, RO.m, w, c, z, i, f} /\ valid_sk OLeft.sk{1}); first by auto.
  wp.
  if; first by auto.
  + inline RRej.OLeft.reprog_acc RO.set.
    sp; wp; conseq />.
    rnd (fun wcz => let (w, c, z) = wcz in ((w, m{2}), c, z))
        (fun xyz => let (wm, c, z) = xyz in let (w, m) = wm in (w, c, z)).
    (* rnd makes me very sad *)
    skip => /> *.
    (* Don't ask about these intro patterns *)
    split => /= [[[??]??]|_]; first smt(dXYZ_acc_supp_m).
    split => /= [[??]??| _ [???]] /=; first smt(dXYZ_acc1E dXYZ_acc_supp_m).
    smt(dXYZ_acc_supp_m dXYZ_acc_supp).
  + inline RRej.OLeft.reprog_rej.
    sp; wp; conseq />.
    seq 1 1: (={RO.m} /\ (wr{1}, m{1}) = x{2} /\ cr{1} = y{2}); last by inline RO.set; auto.
    conseq />.
    rnd (fun wc => let (w, c) = wc in ((w, m{2}), c))
        (fun xy => let (x, y) = xy in let (w, m) = x in (w, y)).
    skip => /> *.
    (* rnd makes me incredibly sad *)
    split => [[[??]?]?|_] /=; first smt(dXY_rej_supp_m).
    split => [[[??]?]|_ [??]?] /=; first smt(dXY_rej1E dXY_rej_supp_m).
    smt(dXY_rej_supp_m dXY_rej_supp).
qed.

equiv reduction_correct_right :
  Game(Adv, ORight).main ~ RRej.Game(RRej.ORight, Reduction).main :
  ={glob Adv} ==> ={res}.
proof.
proc.
inline RO.init ORight.init RRej.ORight.init Reduction(RRej.ORight).distinguish.
wp; seq 2 2: (#pre /\ ={RO.m} /\ ={OLeft.sk} /\ valid_sk OLeft.sk{1}); first by rnd; auto => /> /#.
call (_ : ={RO.m, OLeft.sk} /\ valid_sk OLeft.sk{1}); last by skip => />.
- by proc; inline RO.get; auto.

- transitivity ORight_drop_rej_info.sign
  (={OLeft.sk, arg, RO.m} /\ valid_sk OLeft.sk{1} ==> ={res, RO.m, OLeft.sk} /\ valid_sk OLeft.sk{1})
  (={OLeft.sk, arg, RO.m} /\ valid_sk OLeft.sk{1} ==> ={res, RO.m, OLeft.sk} /\ valid_sk OLeft.sk{1});
    1, 2: smt().
  + conseq ORight_restructure_all; 1, 2: smt().
  proc; conseq/>.
  seq 5 5: (#pre /\ ={w, c, z, i, f}); 1: by auto.
  while(#pre); last by skip => />.
  wp; seq 2 2: (={OLeft.sk, m, RO.m, w, c, z, i, f} /\ valid_sk OLeft.sk{1}); first by auto.
  if; 3: by (inline RRej.ORight.reprog_rej; auto).
  + by auto.
  inline RRej.OLeft.reprog_acc RO.set.
  sp; wp; conseq />.
  rnd (fun wcz => let (w, c, z) = wcz in ((w, m{2}), c, z))
      (fun xyz => let (wm, c, z) = xyz in let (w, m) = wm in (w, c, z)).
  (* copied from proof above for left game *)
  skip => /> *.
  split => /= [[[??]??]|_]; first smt(dXYZ_acc_supp_m).
  split => /= [[??]??| _ [???]] /=; first smt(dXYZ_acc1E dXYZ_acc_supp_m).
  smt(dXYZ_acc_supp_m dXYZ_acc_supp).
qed.

lemma reprog_once_bound &m :
  `| Pr[Game(Adv, OLeft).main() @ &m : res] -
     Pr[Game(Adv, ORight).main() @ &m : res] | <= qh%r * (kappa * qs)%r * alpha.
proof.
have ->: Pr[Game(Adv, OLeft).main() @ &m : res] =
         Pr[RRej.Game(RRej.OLeft, Reduction).main() @ &m: res].
- byequiv => //.
  conseq reduction_correct_left => //.
have ->: Pr[Game(Adv, ORight).main() @ &m : res] =
         Pr[RRej.Game(RRej.ORight, Reduction).main() @ &m: res].
- byequiv => //.
  conseq reduction_correct_right => //.
apply (ReprogRejBound Reduction).
move => ORej.
apply (Reduction_ll ORej).
move => ORej.
(* Error with `conseq (Reduction_bound ORej).` *)
admitted.

end section.
