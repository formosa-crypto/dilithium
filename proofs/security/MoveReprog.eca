require import AllCore Distr.
require import DistrExtras.
require import SDist.
require import StdOrder.
import RealOrder.
(* -- necessary abstract stuff -- *)

type M, W, C, Z, ST, PK, SK.

op [lossless] keygen : (PK * SK) distr.
op [lossless] commit : SK -> (W * ST) distr.
op [lossless uniform] dC : C distr.
op respond : SK -> ST -> C -> Z option.

(* -- Require most (valid?) keys to have high min-entropy -- *)

op check_entropy : SK -> bool.
op gamma, alpha : real.

op valid_sk sk =
  exists pk, (pk, sk) \in keygen.

axiom check_entropy_correct :
  forall sk, valid_sk sk => check_entropy sk => p_max (commit sk) >= alpha.

axiom most_keys_high_entropy :
  mu keygen (fun keys => let (pk, sk) = keys in ! check_entropy sk) <= gamma.

(* -- Axiom lifted from other reprogramming games -- *)

axiom all_sk_can_accept sk :
  valid_sk sk =>
  exists w st c,
  (w, st) \in commit sk /\
  c \in dC /\
  respond sk st c <> None.

axiom all_sk_can_reject sk :
  valid_sk sk =>
  exists w st c,
  (w, st) \in commit sk /\
  c \in dC /\
  respond sk st c = None.

(* -- various bounds -- *)

(* max. number of signing queries *)
op qs : {int | 0 < qs} as qs_gt0.
(* max. number of hash queries *)
op qh : {int | 0 < qh} as qh_gt0.
(* max. number of iterations *)
op kappa : {int | 0 < kappa} as kappa_gt0.

(* -- Security Game -- *)

clone import PROM.FullRO with
  type in_t <= W * M,
  type out_t <= C,
  op dout <= fun _ => dC
proof *.

module type Oracle = {
  proc h(w: W, m: M) : C
  proc sign(m: M) : W * C * Z
}.

module type Oracle_i = {
  include Oracle
  proc init() : unit
}.

module Count (O: Oracle_i) : Oracle = {
  var countS : int
  var countH : int

  proc init = O.init

  proc h(w: W, m : M) : C = {
    var y;
    countH <- countH + 1;
    y <@ O.h((w, m));
    return y;
  }

  proc sign(x) = {
    var y;
    countS <- countS + 1;
    y <@ O.sign(x);
    return y;
  }
}.

module OLeft : Oracle_i = {
  var sk : SK

  proc init() = {
    var pk;
    (pk, sk) <$ keygen;
  }

  proc h = RO.get

  proc sign(m: M) = {
    var w, st, c, oz, i;
    (* Silences unused variables warning *)
    w <- witness;
    c <- witness;

    i <- 0;
    oz <- None;
    while(oz = None /\ i < kappa) {
      (w, st) <$ commit sk;
      c <$ dC;
      oz <- respond sk st c;
      RO.set((w, m), c);
      i <- i + 1;
    }
    return if oz <> None then (w, c, oget oz) else witness;
  }
}.

(* Moving RO.set outside while-loop *)
module ORight : Oracle_i = {
  include var OLeft[init, h]

  proc sign(m: M) = {
    var w, st, c, oz, i;

    (* Silences unused variables warning *)
    w <- witness;
    c <- witness;

    i <- 0;
    oz <- None;
    while(oz = None /\ i < kappa) {
      (w, st) <$ commit sk;
      c <$ dC;
      oz <- respond sk st c;
      i <- i + 1;
    }
    if(oz <> None)
      RO.set((w, m), c);
    return if oz <> None then (w, c, oget oz) else witness;
  }
}.

module type Adversary(O: Oracle) = {
  proc distinguish(): bool
}.

module Game (Adv: Adversary) (O: Oracle_i) = {
  proc main() = {
    var b;
    RO.init();
    O.init();
    b <@ Adv(O).distinguish();
    return b;
  }
}.

section Analysis.

declare module Adv <: Adversary {-Count, -RO, -OLeft}.

declare axiom A_bound : forall (O <: Oracle_i{-Adv}), 
  hoare [ Adv(Count(O)).distinguish : Count.countS = 0 /\ Count.countH = 0 ==> 
                                      Count.countS <= qs /\ Count.countH <= qh ].

declare axiom A_ll : forall (O <: Oracle),
  islossless O.h =>
  islossless O.sign =>
  islossless Adv(O).distinguish.

(* -- Reduction to SDist game -- *)

op keygen_good = dcond keygen (fun keys => let (pk, sk) = keys in check_entropy sk).

lemma keygen_good_sdist :
  sdist keygen keygen_good <= gamma.
print sdist_dcond.
proof.
apply (ler_trans (mu keygen (predC (fun keys => let (pk, sk) = keys in check_entropy sk)))).
- apply sdist_dcond.
  exact keygen_ll.
- rewrite /predC /=.
  have ->: (fun (x : PK * SK) => ! (let (_, sk) = x in check_entropy sk)) =
           (fun (x : PK * SK) => (let (_, sk) = x in ! check_entropy sk)).
  + by apply fun_ext => x /#.
  exact most_keys_high_entropy.
qed.

local clone Dist with
  type a <- PK * SK.

(* -- Left game reduction -- *)

local module OReduceLeft : Oracle = {
  var sk : SK

  proc h = RO.get

  proc sign(m: M) = {
    var w, st, c, oz, i;
    (* Silences unused variables warning *)
    w <- witness;
    c <- witness;

    i <- 0;
    oz <- None;
    while(oz = None /\ i < kappa) {
      (w, st) <$ commit sk;
      c <$ dC;
      oz <- respond sk st c;
      RO.set((w, m), c);
      i <- i + 1;
    }
    return if oz <> None then (w, c, oget oz) else witness;
  }
}.

local module ReductionLeft : Dist.GenDist.Distinguisher = {
  proc guess(keys : PK * SK) = {
      var b;
      OReduceLeft.sk <- keys.`2;
      RO.init();
      b <@ Adv(OReduceLeft).distinguish();
      return b;
  }
}.

local equiv left_reduce_bad :
  Game(Adv, OLeft).main ~ Dist.Sample(ReductionLeft).main :
  ={glob Adv} /\ arg{2} = keygen ==> ={res}.
proof.
proc. inline*. wp.
seq 2 4: (={glob Adv, RO.m} /\ OLeft.sk{1} = OReduceLeft.sk{2}).
- by auto => />.
call(: ={RO.m} /\ OLeft.sk{1} = OReduceLeft.sk{2}).
- by proc; auto.
- proc; inline *.
  by sim; skip => />.
by auto.
qed.

local module OLeft_good = {
  var sk : SK

  proc init() = {
    var pk;
    (pk, sk) <$ keygen_good;
  }

  proc h = RO.get

  proc sign(m: M) = {
    var w, st, c, oz, i;
    (* Silences unused variables warning *)
    w <- witness;
    c <- witness;

    i <- 0;
    oz <- None;
    while(oz = None /\ i < kappa) {
      (w, st) <$ commit sk;
      c <$ dC;
      oz <- respond sk st c;
      RO.set((w, m), c);
      i <- i + 1;
    }
    return if oz <> None then (w, c, oget oz) else witness;
  }
}.

local equiv left_reduce_good :
  Game(Adv, OLeft_good).main ~ Dist.Sample(ReductionLeft).main :
  ={glob Adv} /\ arg{2} = keygen_good ==> ={res}.
proof.
proc. inline*. wp.
seq 2 4: (={glob Adv, RO.m} /\ OLeft_good.sk{1} = OReduceLeft.sk{2}).
- by auto => />.
call(: ={RO.m} /\ OLeft_good.sk{1} = OReduceLeft.sk{2}).
- by proc; auto.
- proc; inline *.
  by sim; skip => />.
by auto.
qed.

local lemma left_reduce_bound &m :
  `|Pr[Dist.Sample(ReductionLeft).main(keygen) @ &m : res] -
    Pr[Dist.Sample(ReductionLeft).main(keygen_good) @ &m : res]| <=
    gamma.
proof.
apply (ler_trans (sdist keygen keygen_good)).
- exact (Dist.adv_sdist ReductionLeft).
exact keygen_good_sdist.
qed.

(* Exactly same as above for right game *)

local module OReduceRight : Oracle = {
  var sk : SK

  proc h = RO.get

  proc sign(m: M) = {
    var w, st, c, oz, i;

    (* Silences unused variables warning *)
    w <- witness;
    c <- witness;

    i <- 0;
    oz <- None;
    while(oz = None /\ i < kappa) {
      (w, st) <$ commit sk;
      c <$ dC;
      oz <- respond sk st c;
      i <- i + 1;
    }
    if(oz <> None)
      RO.set((w, m), c);
    return if oz <> None then (w, c, oget oz) else witness;
  }
}.

local module ReductionRight : Dist.GenDist.Distinguisher = {
  proc guess(keys : PK * SK) = {
      var b;
      OReduceRight.sk <- keys.`2;
      RO.init();
      b <@ Adv(OReduceRight).distinguish();
      return b;
  }
}.

local equiv right_reduce_bad :
  Game(Adv, ORight).main ~ Dist.Sample(ReductionRight).main :
  ={glob Adv} /\ arg{2} = keygen ==> ={res}.
proof.
proc. inline*. wp.
seq 2 4: (={glob Adv, RO.m} /\ OLeft.sk{1} = OReduceRight.sk{2}).
- by auto => />.
call(: ={RO.m} /\ OLeft.sk{1} = OReduceRight.sk{2}).
- by proc; auto.
- proc; inline *.
  by sim; skip => />.
by auto.
qed.

local module ORight_good = {
  var sk : SK

  proc init() = {
    var pk;
    (pk, sk) <$ keygen_good;
  }

  proc h = RO.get

  proc sign(m: M) = {
    var w, st, c, oz, i;

    (* Silences unused variables warning *)
    w <- witness;
    c <- witness;

    i <- 0;
    oz <- None;
    while(oz = None /\ i < kappa) {
      (w, st) <$ commit sk;
      c <$ dC;
      oz <- respond sk st c;
      i <- i + 1;
    }
    if(oz <> None)
      RO.set((w, m), c);
    return if oz <> None then (w, c, oget oz) else witness;
  }
}.

local equiv right_reduce_good :
  Game(Adv, ORight_good).main ~ Dist.Sample(ReductionRight).main :
  ={glob Adv} /\ arg{2} = keygen_good ==> ={res}.
proof.
proc. inline*. wp.
seq 2 4: (={glob Adv, RO.m} /\ ORight_good.sk{1} = OReduceRight.sk{2}).
- by auto => />.
call(: ={RO.m} /\ ORight_good.sk{1} = OReduceRight.sk{2}).
- by proc; auto.
- proc; inline *.
  by sim; skip => />.
by auto.
qed.

local lemma right_reduce_bound &m :
  `|Pr[Dist.Sample(ReductionRight).main(keygen) @ &m : res] -
    Pr[Dist.Sample(ReductionRight).main(keygen_good) @ &m : res]| <=
    gamma.
proof.
apply (ler_trans (sdist keygen keygen_good)).
- exact (Dist.adv_sdist ReductionRight).
exact keygen_good_sdist.
qed.

(* TODO local clone ReprogOnce to finish the proof...? *)




lemma adv_bound &m :
  `| Pr[Game(Adv, OLeft).main() @ &m : res] -
     Pr[Game(Adv, ORight).main() @ &m : res] |
  (* Maybe factor of 2?
   * Both OLeft and ORight need to be reduced to SDist game. *)
  <= 2%r * gamma + qh%r * (kappa * qs)%r * alpha.
proof.
admitted.

end section Analysis.
