require import Real RealSeries Distr AllCore.
require import List Distr DBool Finite.
clone import Biased.
require import FinType.
require import StdBigop.
import Bigreal BRA.

type matrix.
type vector.
type scalar.
op ( *^ ) : matrix -> vector -> vector.
op ( * ) : scalar -> vector -> vector.
op ( + ) : vector -> vector -> vector.
op ( - ) : vector -> vector -> vector.
op [ - ] : vector -> vector.

clone import FinType as FinVector_t with type t <- vector.

(* Some vector properties to prove *)

axiom vector_move_add :
  forall (u v w : vector), u + v = w <=> u = w - v.

axiom some_vector_property :
  forall (a : matrix) (c : scalar) (y s1 s2 : vector),
  a *^ y - c * s2 = a *^ (y + c * s1) - c * (a *^ s1 + s2).

type sk_t = matrix * vector * vector.
type pk_t = matrix * vector.
type commit_t = vector.
type st_t = vector * vector.
type challenge_t = scalar.

op [lossless full uniform] dA : matrix distr.
op [lossless uniform] ds1 : vector distr.
op [lossless uniform] ds2 : vector distr.
op [lossless uniform] dy : vector distr.
op dC : challenge_t distr.
op highbits, lowbits : vector -> vector.
op check_znorm : vector -> bool.

op [lossless uniform] dsimz : vector distr.
axiom dsimz_supp : support dsimz = check_znorm.

op keygen : (pk_t * sk_t) distr =
  dlet dA (fun a =>
    dlet ds1 (fun s1 =>
      dlet ds2 (fun s2 =>
        let t = a *^ s1 + s2 in
        dunit ((a, t), (a, s1, s2))
  ))).

lemma pk_decomp : forall a' t' a s1 s2,
  ((a', t'), (a, s1, s2)) \in keygen =>
  a' = a /\ t' = a *^ s1 + s2.
proof.
(* So much for abusing smt... *)
smt(supp_dlet supp_dunit).
qed.

lemma keys_supp : forall a' t' a s1 s2,
  ((a', t'), (a, s1, s2)) \in keygen =>
  a \in dA /\ s1 \in ds1 /\ s2 \in ds2.
proof.
smt(supp_dlet supp_dunit).
qed.

op line12_magicnumber : real = (size (to_seq check_znorm))%r / (size (to_seq (support dy)))%r.

lemma dsimz1E :
  forall z, check_znorm z =>
    mu1 dsimz z = inv (size (to_seq check_znorm))%r.
proof.
  move => z ?.
  rewrite mu1_uni_ll ?dsimz_uni ?dsimz_ll; smt(dsimz_supp).
qed.

op dsimoz = dlet (dbiased line12_magicnumber) (fun b => if b then dmap dsimz Some else dunit None).

axiom masking_range :
  forall c s1 z0, c \in dC => s1 \in ds1 => check_znorm z0 =>
    z0 - c * s1 \in dy.

axiom mask_size :
  size (to_seq check_znorm) < size (to_seq (support dy)).

axiom mask_nonzero :
  0 < size (to_seq check_znorm).

(* Response and/or leakage.
 * For now, just `response_t option` would do
 *)
type resp_leak_t.
(* Second half of response *)
op resp_second_half (z : vector) (c : scalar) (w' t0 : vector) : resp_leak_t.
(* Failed on first znorm check *)
op failed_znorm : resp_leak_t.
(* transcript + leakage.
 * Intended instantiation: (W * C * Z) option. *)
type trans_leak_t.
(* Constructs a transcript.
 * Intended instantiation: if z <> None then Some (w, c, oget z) else None.
 *)
op trans_of : commit_t -> challenge_t -> resp_leak_t -> trans_leak_t.
(* Commitment recoverable version of above *)
op recover_trans_of : challenge_t -> resp_leak_t -> trans_leak_t.

op commit (sk : sk_t) : (commit_t * st_t) distr =
  let (a, s1, s2) = sk in
    dmap dy (fun y =>
      let w = a *^ y in
      (highbits w, (y, w))).

op respond (sk : sk_t) (c : challenge_t) (st : st_t) : resp_leak_t =
  let (a, s1, s2) = sk in
  let t0 = lowbits (a *^ s1 + s2) in
  let (y, w) = st in
  let z = y + c * s1 in
  let w' = w - c * s2 in
  if check_znorm z then
    resp_second_half z c w' t0
  else
    failed_znorm.

(* Should hopefully be a straightforward consequence of the *real*
 * commitment-recovery property... *)
axiom commitment_recoverable pk sk w1 st c z :
  (pk, sk) \in keygen =>
  (w1, st) \in commit sk =>
  c \in dC =>
  z = respond sk c st =>
  trans_of w1 c z = recover_trans_of c z.

module Transcript = {
  proc main(pk: pk_t, sk: sk_t) : trans_leak_t = {
    var w1, c, z, st;
    (w1, st) <$ commit sk;
    c <$ dC;
    z <- respond sk c st;
    return trans_of w1 c z;
  }
}.

module Simulator = {
  proc main(pk: pk_t) : trans_leak_t = {
    var a, t, t0, w', c, oz, z;
    var resp;
    (a, t) <- pk;
    t0 <- lowbits t;
    c <$ dC;
    oz <$ dsimoz;
    if(oz <> None) {
      z <- oget oz;
      w' <- a *^ z - c * t;
      resp <- resp_second_half z c w' t0;
    } else {
      resp <- failed_znorm;
    }
    return recover_trans_of c resp;
  }
}.

section Analysis.

lemma HVZK_main :
  equiv[Transcript.main ~ Simulator.main : (pk{1}, sk{1}) \in keygen /\ ={pk} ==> ={res}].
proof.
admitted.

(** Proofs below broken by interface change.

(* TODO Let's just handle the commitment-recovery shenanigans in the first game? *)

(* Another (equivalent) way to write game0.
 * Mostly just inlining functions and reordering instructions. *)
local module Game1 = {
  proc main(sk: sk_t) : trans_leak_t = {
    var a, s1, s2, w, w', y, c, z, t, t0;
    var result;

    (a, s1, s2) <- sk;
    t <- a *^ s1 + s2;
    t0 <- lowbits t;
    c <$ dC;
    y <$ dy;
    w <- a *^ y;
    z <- y + c * s1;
    if(check_znorm z) {
      w' <- w - c * s2;
      result <- trans_second_half z c w' t0;
    } else {
      result <- failed_znorm;
    }
    return result;
  }
}.

local lemma hop1 :
  equiv[Transcript.main ~ Game1.main : ={sk} ==> ={res}].
proof.
proc.
swap{1} 1 1.
swap{2} [1..3] 1.
seq 1 1: (={sk, c}).
- by rnd => //.
seq 0 1: (#pre /\ sk{2} = (a{2}, s1{2}, s2{2})).
- by auto => /#.
seq 0 2: (#pre /\ t{2} = a{2} *^ s1{2} + s2{2} /\ t0{2} = lowbits t{2}).
- by auto => /#.
seq 1 2: (#pre /\ st{1} = (y{2}, w{2})).
- rnd: *0 *0; auto => /=.
  move => />.
  move => &2.
  split; by rewrite /commit /= dmap_comp /(\o) => /#.
by auto => /#.
qed.


(* Compute w' using only public information *)
local module Game2 = {
  proc main(sk: sk_t) = {
    var a, s1, s2, w, w', y, c, z, t, t0;
    var result;

    (a, s1, s2) <- sk;
    t <- a *^ s1 + s2;
    t0 <- lowbits t;
    c <$ dC;
    y <$ dy;
    w <- a *^ y;
    z <- y + c * s1;
    if(check_znorm z) {
      w' <- a *^ z - c * t;
      result <- trans_second_half z c w' t0;
    } else {
      result <- failed_znorm;
    }
    return result;
  }
}.

local lemma hop2 :
  equiv[Game1.main ~ Game2.main : ={sk} ==> ={res}].
proof.
proc.
seq 7 7: (={a, z, c, t, t0, w, s2} /\
  w{1} - c{1} * s2{1} = a{2} *^ z{2} - c{2} * t{2}).
auto => />.
move => &2 c c_valid y y_valid.
case (sk{2}) => a s1 s2 /=.
apply some_vector_property.
auto => /#.
qed.

(* If we must... Let's talk about `oz` *)
local module Game2b = {
  proc main(sk: sk_t) = {
    var a, s1, s2, w, w', y, c, z, t, t0, oz;
    var result;

    (a, s1, s2) <- sk;
    t <- a *^ s1 + s2;
    t0 <- lowbits t;
    c <$ dC;
    y <$ dy;
    w <- a *^ y;
    z <- y + c * s1;
    oz <- if check_znorm z then Some z else None;
    if(oz <> None) {
      z <- oget oz;
      w' <- a *^ z - c * t;
      result <- trans_second_half z c w' t0;
    } else {
      result <- failed_znorm;
    }
    return result;
  }
}.

local lemma hop2b :
  equiv[Game2.main ~ Game2b.main : ={sk} ==> ={res}].
proof.
proc.
by auto => /> /#.
qed.

(* Rewrite relevant parts of the above as operator *)
local module Game3 = {
  proc main(sk: sk_t) = {
    var a, s1, s2, oz, z, c, t, t0, w';
    var result;
    (a, s1, s2) <- sk;
    t <- a *^ s1 + s2;
    t0 <- lowbits t;
    c <$ dC;
    oz <$ transz c s1;
    if(oz <> None) {
      z <- oget oz;
      w' <- a *^ z - c * t;
      result <- trans_second_half z c w' t0;
    } else {
      result <- failed_znorm;
    }
    return result;
  }
}.

local lemma hop3 :
  equiv[Game2b.main ~ Game3.main :
    ={sk} /\
    exists pk, (pk, sk{1}) \in keygen ==> ={res}].
proof.
proc.
seq 4 4: (={sk, a, s1, s2, t, t0, c} /\
    a{1} \in dA /\ s1{1} \in ds1 /\ s2{1} \in ds2).
  auto => />.
  move => &2 pk keys_valid c c_valid.
  smt(keys_supp).
seq 4 1: (#pre /\ ={oz}).
  rnd: *0 *0.
  auto => />.
  move => &2 a_valid s1_valid s2_valid.
  split.
  - move => oz oz_valid.
    rewrite /transz.
    rewrite dmap_comp.
    congr.
    congr.
    rewrite /(\o).
    apply fun_ext => /#.
  - move => _ oz oz_valid.
    rewrite supp_dmap in oz_valid.
    case oz_valid.
    move => y /= [#] y_valid ?; subst => /=.
    rewrite dmap_id_eq_in => //=.
    rewrite /transz.
    rewrite supp_dmap /=.
    exists y => /#.
auto => /#.
qed.

local module Game4 = {
  (* Get (a, t) from public key *)
  proc main(sk: sk_t, pk: pk_t) = {
    var a, a', s1, s2, oz, z, c, t, t0, w';
    var result;
    (a', s1, s2) <- sk;
    (a, t) <- pk;
    t0 <- lowbits t;
    c <$ dC;
    oz <$ transz c s1;
    if(oz <> None) {
      z <- oget oz;
      w' <- a *^ z - c * t;
      result <- trans_second_half z c w' t0;
    } else {
      result <- failed_znorm;
    }
    return result;
  }
}.

local lemma hop4 :
  equiv[Game3.main ~ Game4.main : ={sk} /\ (pk{2}, sk{2}) \in keygen ==> ={res}].
proof.
proc.
seq 2 2: (#pre /\ ={a, s1, s2, t} /\ a{2} = a'{2}).
  auto => />; smt(pk_decomp).
auto => /#.
qed.

(* Now simulate using only public information *)

local lemma line12_magic_some :
  forall c s1 z0, c \in dC => s1 \in ds1 => check_znorm z0 =>
    mu1 (transz c s1) (Some z0) = 1%r / (size (to_seq (support dy)))%r.
proof.
  move => c s1 z0 c_valid s1_valid z0_valid.
  rewrite /transz dmap1E /pred1 /(\o) => /=.
  rewrite (mu_eq _ _ (fun y => y + c * s1 = z0)). move => y. smt().
  have -> : (fun y => y + c * s1 = z0) = pred1 (z0 - c * s1).
    apply fun_ext => y. rewrite /pred1.
    by rewrite vector_move_add //.
  rewrite mu1_uni_ll ?dy_uni ?dy_ll.
  suff -> : (z0 - c * s1) \in dy by trivial.
  exact masking_range.
qed.

local lemma line12_outofbound :
  forall c s1 z0, c \in dC => s1 \in ds1 => ! (check_znorm z0) =>
    (Some z0) \notin (transz c s1).
proof.
move => c s1 z0 c_valid s1_valid z0_invalid.
rewrite /transz /pred1 /(\o) => /=.
rewrite supp_dmap => /#.
qed.

local lemma sumD1_None (f : 'a option -> real) :
  summable f =>
  sum f = sum (fun y => f (Some y)) + f None.
proof.
move => sum_f; rewrite (sumD1 f None) // RField.addrC; congr.
rewrite (sum_partition Some (fun y => f (Some y))).
exact (summable_inj Some).
apply eq_sum => -[|x /=]; 1: by rewrite /= sum0.
rewrite (sumE_fin _ [x]) // /#.
qed.

local lemma sum_characteristic (P : 't -> bool) (v : real) :
  is_finite P =>
  sum (fun z => if P z then v else 0%r) = (size (to_seq P))%r * v.
proof.
move => P_finite.
rewrite (sumE_fin _ (to_seq P)) /=.
- apply uniq_to_seq => //.
- smt(mem_to_seq).
rewrite -big_mkcond Bigreal.sumr_const; congr.
rewrite count_predT_eq_in => //.
move => z; apply mem_to_seq => //.
qed.

local lemma line12_magic_none :
  forall c s1, c \in dC => s1 \in ds1 =>
    mu1 (transz c s1) None = 1%r - (size (to_seq check_znorm))%r / (size (to_seq (support dy)))%r.
proof.
move => c s1 c_valid s1_valid.
have sumz : (sum (fun z => mu1 (transz c s1) z) = 1%r).
  by rewrite - weightE; apply dmap_ll; apply dy_ll.
rewrite sumD1_None /= in sumz.
  by apply summable_mu1.
suff: sum (fun (y : vector) => mu1 (transz c s1) (Some y)) = 
  (size (to_seq check_znorm))%r / (size (to_seq (support dy)))%r by smt().
clear sumz.
have -> :
  (fun z => mu1 (transz c s1) (Some z)) =
  (fun z => if check_znorm z then 1%r / (size (to_seq (support dy)))%r else 0%r).
  apply fun_ext => z; case (check_znorm z).
  + move => z_good.
    rewrite line12_magic_some => /#.
  + move => z_out.
    apply supportPn.
    apply line12_outofbound => //.
apply sum_characteristic.
apply (finite_leq predT<:vector> check_znorm) => //.
by apply is_finite.
qed.

lemma sum_over_bool (f : bool -> real):
  sum (fun b => f b) = f true + f false.
proof.
rewrite (sumE_fin _ [true; false]) /#.
qed.

(* Now 40% less magical! *)
local lemma line12_magic :
  forall c s1, c \in dC => s1 \in ds1 =>
  transz c s1 = dsimoz.
proof.
move => c s1 c_valid s1_valid.
apply eq_distr => z.
case z.
- rewrite line12_magic_none //.
  apply eq_sym; rewrite dlet1E sum_over_bool /=.
  rewrite dmap1E /pred1 /(\o) mu0 /=.
  rewrite dunit1E dbiased1E /line12_magicnumber /=.
  rewrite clamp_id; smt(mask_nonzero mask_size).
- move => z.
  case (check_znorm z).
  + move => z_valid.
    rewrite line12_magic_some //.
    rewrite eq_sym /line12_magicnumber dlet1E sum_over_bool /=.
    rewrite dunit1E /=.
    rewrite dmap1E /pred1 /(\o) /=.
    rewrite dsimz1E //=.
    rewrite dbiased1E /=.
    rewrite clamp_id; smt(mask_nonzero mask_size).
  + move => z_invalid.
    have -> : mu1 (transz c s1) (Some z) = 0%r.
      apply supportPn; apply line12_outofbound; by assumption.
    apply eq_sym; apply supportPn.
    rewrite supp_dlet.
    (* abuse of smt? *)
    smt(supp_dmap supp_dunit dsimz_supp).
qed.

local lemma hop5 :
  equiv[Game4.main ~ Simulator.main : (pk{1}, sk{1}) \in keygen /\ ={pk} ==> ={res}].
proof.
proc.
seq 4 3 : (#pre /\ ={a, t, t0, c} /\ a{1} = a'{1} /\ sk{1} = (a'{1}, s1{1}, s2{1}) /\ pk{1} = (a{1}, t{1}) /\ c{1} \in dC).
  auto; smt(pk_decomp).
seq 1 1 : (#pre /\ ={oz}).
  rnd; auto => //= &1 &2.

  move => [#] valid_keys ? ? ? ? ? ? ? ? c_valid; subst.
  have a_supp : a{2} \in dA by smt(keys_supp).
  have s1_supp : s1{1} \in ds1 by smt(keys_supp).
  have s2_supp : s2{1} \in ds2 by smt(keys_supp).
  apply pk_decomp in valid_keys.
  case valid_keys => [#] ? ?; subst.

  (* Now comes the actual proof *)
  split.
  rewrite line12_magic //=.
  move => H oz ?.
  split; 1: smt(line12_magic).
  move => _.
  split.
  split; 2: trivial.
    (* keygen support... *)
    rewrite /keygen.
    apply supp_dlet => /=.
    exists a{2}.
    split; 1: assumption.
    apply supp_dlet => /=.
    exists s1{1}.
    split; 1: assumption.
    apply supp_dlet => /=.
    exists s2{1}.
    split; 1: assumption.
    by apply supp_dunit.
  smt().
auto => /#.
qed.

lemma HVZK_main :
  equiv[Transcript.main ~ Simulator.main : (pk{2}, sk{1}) \in keygen ==> ={res}].
proof.
transitivity Game1.main (={sk} ==> ={res}) ((pk{2}, sk{1}) \in keygen ==> ={res}).
  smt().
  smt().
  apply hop1.
transitivity Game2.main (={sk} ==> ={res}) ((pk{2}, sk{1}) \in keygen ==> ={res}).
  smt().
  smt().
  apply hop2.
transitivity Game2b.main (={sk} ==> ={res}) ((pk{2}, sk{1}) \in keygen ==> ={res}).
  smt().
  smt().
  apply hop2b.
transitivity Game3.main (={sk} /\
    exists pk, (pk, arg{1}) \in keygen ==> ={res}) ((pk{2}, sk{1}) \in keygen ==> ={res}).
  smt().
  smt().
  apply hop3.
transitivity Game4.main (={sk} /\
    (pk{2}, sk{2}) \in keygen ==> ={res}) ((pk{1}, sk{1}) \in keygen /\ ={pk} ==> ={res}).
  move => &1 &2 ?.
  exists (arg{1}, arg{2}).
  smt().
  smt().
  apply hop4.
apply hop5.
qed.

**)

end section Analysis.
