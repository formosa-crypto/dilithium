(* Lifting DRing to vectors *)

require import AllCore IntDiv Distr List Nat.
require MatPlus DRing.

clone import DRing as DR. 
import RqRing.

clone import DR.HighLow as HL.

clone import MatPlus as MatRq 
  with theory ZR <= DR.RqRing.

op shiftV (w1 : high list) = oflist (map (fun x => shift x) w1).
op lowBitsV v = mapv lowBits v.
op highBitsV v = map highBits (tolist v).
(* FIXME: Maybe this combinator should be in the standard library...? *)
op uncurry (f : 'a -> 'b -> 'c) (ab : 'a * 'b) : 'c = let (a, b) = ab in f a b.
op makeHintV rv zv = map (uncurry makeHint) (zip (tolist rv) (tolist zv)).
op useHintV (hv : hint_t list) (rv : vector) : high list = map (uncurry useHint) (zip hv (tolist rv)).
(* Some kinda weights check for bitpacking *)
op checkHintV (hv : hint_t list) : bool.

(* base2 stuff *)
op base2lowbitsV = mapv base2lowbits.
op base2highbitsV v = map base2highbits (tolist v).
op base2shiftV lst = oflist (map base2shift lst).
op base2roundV = base2shiftV \o base2highbitsV.

lemma size_shiftV (w1 : high list) : size (shiftV w1) = size w1.
proof. by rewrite size_oflist size_map. qed.

lemma size_lowBitsV (v : vector) : size (lowBitsV v) = size v by [].
lemma size_highBitsV (v : vector) : size (highBitsV v) = size v.
proof. by rewrite /highBitsV size_map size_tolist. qed.

lemma shiftV_inj : injective shiftV. 
proof. 
have ms_inj := inj_map _ shift_inj.
by move => hs1 hs2 /oflist_inj /ms_inj.
qed.

lemma high_lowPv x : shiftV (highBitsV x) + lowBitsV x = x.
proof.
apply eq_vectorP.
have eq_size : size (shiftV (highBitsV x)) = size (lowBitsV x).
- by rewrite ?size_shiftV ?size_mapv ?size_map ?size_range /#.
have -> /= i i_bound : size (shiftV (highBitsV x) + lowBitsV x) = size x.
- by rewrite size_addv ?eq_size /= size_mapv.
rewrite get_addv // get_mapv // (get_oflist witness) ?size_map ?size_range //.
rewrite !(nth_map witness) /=; 1..3: smt(size_range size_tolist size_map).
by rewrite nth_range //= high_lowP.
qed.

import BigMax.

op inf_norm = big predT (Nat.ofint \o cnorm).
op inf_normv = Nat.ofnat \o inf_norm \o tolist.

lemma inf_normv_cat (v1 v2 : vector) : 
   inf_normv (v1 || v2) = max (inf_normv v1) (inf_normv v2).
proof. 
by rewrite /inf_normv /(\o) max_ofnat tolist_catv /inf_norm big_cat.
qed.

lemma inf_normvN (v : vector) : inf_normv (-v) = inf_normv v.
proof. 
rewrite /inf_normv /normv /pnormv /tolist /(\o); congr. 
by rewrite /inf_norm !big_map /(\o) /= &(eq_bigr) => i _ /=; rewrite cnormN.
qed.

lemma ler_inf_normv (v1 v2 : vector) : 
  inf_normv (v1 + v2) <= inf_normv v1 + inf_normv v2.
admitted.

lemma inf_normv_low v : inf_normv (lowBitsV v) <= alpha %/ 2.
proof.
rewrite ler_ofnat ;split;1:smt(ge2_alpha). 
apply ler_bigmax => r @/(\o) /mem_tolist [i].
rewrite size_mapv => -[bound_i ->] _. 
by rewrite get_mapv // ler_ofint cnorm_ge0 /=; smt(lowbit_small).
qed.

lemma inf_normv_vectc n c : 0 < n =>
  inf_normv (vectc n c) = cnorm c.
proof.
rewrite /inf_normv /(\o) /normv /pnormv tolist_vectc /inf_norm => n_gt0.
by rewrite (eq_bigmax c (Nat.ofint (cnorm c))); smt(mem_nseq ofintK cnorm_ge0).
qed.

lemma inf_normv_ltr v a :
  0 < a =>
  inf_normv v < a <=>
  (forall i, 0 <= i < size v => cnorm v.[i] < a).
proof.
move => gt0_a.
rewrite /inf_normv /inf_norm /(\o).
rewrite ltr_ofnat; have -> /=: (0 <= a) = true by smt().
rewrite -ltr_bigmax; first smt(ofintK).
split => ?.
- move => i rg_i.
  have ?: v.[i] \in tolist v by smt(mem_tolist).
  smt(ofintK).
- move => x supp_x _ /=.
  rewrite mem_tolist in supp_x.
  rewrite ltr_ofint.
  by split => [|/#]; first exact cnorm_ge0.
qed.

lemma inf_normv_ler v a :
  0 <= a =>
  inf_normv v <= a <=>
  (forall i, 0 <= i < size v => cnorm v.[i] <= a).
proof.
move => ge0_a.
rewrite /inf_normv /inf_norm /(\o).
rewrite ler_ofnat; have -> /=: (0 <= a) = true by smt().
rewrite -ler_bigmax.
split => ?.
- move => i rg_i.
  have ?: v.[i] \in tolist v by smt(mem_tolist).
  smt(ofintK).
- move => x supp_x _ /=.
  rewrite mem_tolist in supp_x.
  rewrite ler_ofint.
  by split => [|/#]; first exact cnorm_ge0.
qed.

lemma hide_lowV (rv sv : vector) (b : int) :
  size rv = size sv =>
  0 <= b =>
  0 < alpha %/ 2 - b =>
  inf_normv sv <= b =>
  inf_normv (lowBitsV rv) < alpha %/ 2 - b =>
  highBitsV (rv + sv) = highBitsV rv.
proof.
move => eq_size ge0_b lt_b_halfalpha small_sv small_low_rv.
rewrite inf_normv_ler // in small_sv.
rewrite inf_normv_ltr // in small_low_rv.
rewrite /highBitsV.
apply (eq_from_nth witness).
- rewrite !size_map !size_range /=.
  smt(size_addv).
move => j rg_j.
rewrite !size_map size_range in rg_j.
rewrite size_addv eq_size /= in rg_j.
rewrite (nth_map witness).
- by rewrite size_tolist; smt(size_addv).
rewrite (nth_map witness witness highBits).
- by rewrite size_tolist; smt(size_addv).
rewrite nth_tolist; first smt(size_addv).
rewrite nth_tolist; first smt(size_addv).
rewrite get_addv //.
rewrite (hide_low _ _ b) //; first smt().
smt(get_mapv size_lowBitsV).
qed.

lemma l1_inf_norm_product_ub (x : Rq) (yv : vector) (b1 b2 : int) :
  0 < b1 =>
  0 < b2 =>
  l1_norm x <= b1 =>
  inf_normv yv <= b2 =>
  inf_normv (x ** yv) <= b1 * b2.
proof.
move => gt0_b1 gt0_b2 norm_x_ub norm_yv_ub.
rewrite inf_normv_ler in norm_yv_ub; first smt().
rewrite inf_normv_ler; first smt().
move => i rg_i.
rewrite size_scalarv in rg_i.
rewrite get_scalarv.
by apply l1_cnorm_product_ub => // /#.
qed.

lemma ge0_inf_normv v :
  0 <= inf_normv v.
proof.
rewrite /inf_normv /(\o) /inf_norm.
apply ler_ofint_ofnat => //.
exact le0n.
qed.

lemma inf_normv_zero dim :
  inf_normv (zerov dim) = 0.
proof.
suff: inf_normv (zerov dim) <= 0 by smt(ge0_inf_normv).
apply inf_normv_ler => //.
move => i rg_i.
rewrite get_zerov.
by rewrite cnorm0 //.
qed.

lemma usehint_correctV (z r : vector) :
  inf_normv z <= alpha %/ 2 =>
  let h = makeHintV z r in
    useHintV h r = highBitsV (r + z).
proof. admitted.

(* lemma hide_low2 (r : vector) (h : hint_t list) : *)
(*   inf_normv (r - shiftV (useHintV h r)) <= alpha + 1. *)
(* proof. admitted. *)

lemma size_base2shiftV t1 : 
    size (base2shiftV t1) = size t1.
proof. by rewrite size_oflist size_map. qed.

lemma size_base2highbitsV t : 
    size (base2highbitsV t) = size t.
proof. by rewrite size_map size_tolist. qed.

lemma size_base2lowbitsV t : 
    size (base2lowbitsV t) = size t.
proof. by rewrite size_mapv. qed.

lemma size_useHintV h r : 
  size (useHintV h r) = min (size h) (size r).
proof. by rewrite size_map size_zip size_tolist. qed.

lemma b2high_lowPv (t : vector) : 
  base2shiftV (base2highbitsV t) + base2lowbitsV t = t.
proof.
apply/eq_vectorP.
rewrite size_addv size_base2shiftV size_base2highbitsV size_base2lowbitsV.
split => // i Hi; rewrite get_addv get_mapv 1:/#.
rewrite (get_oflist witness); 1: smt(size_map size_base2highbitsV).
rewrite (nth_map witness); 1: smt(size_base2highbitsV).
rewrite (nth_map witness); 1: smt(size_tolist).
by rewrite nth_tolist 1:/# base2high_low.
qed.


lemma hint_error (r : vector) (h : hint_t list) : size r = size h => 
  inf_normv (r - shiftV (useHintV h r)) <= alpha + 1. 
proof.
move => eq_r_h; apply/inf_normv_ler => [|i ?]; 1: smt(ge2_alpha).
rewrite get_addv getvN (get_oflist witness).
- smt(size_map size_addv size_oppv size_shiftV size_useHintV).
rewrite (nth_map witness) /=. 
- smt(size_map size_addv size_oppv size_shiftV size_useHintV).
rewrite (nth_map (witness,witness)) /=.
- smt(size_map size_addv size_oppv size_shiftV size_useHintV size_zip size_tolist).
rewrite nth_zip ?size_tolist 1:/# /uncurry /= nth_tolist.
- smt(size_map size_addv size_oppv size_shiftV size_useHintV).
exact hide_low2.
qed.

lemma b2low_bound t : inf_normv (base2lowbitsV t) <= 2 ^ (d - 1).
admitted.
