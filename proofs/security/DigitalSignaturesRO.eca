(* This file is adapted from the "verifyhashbased" *)

require import AllCore List.
require PROM.

require DigitalSignatures.

(* FIXME: this pulls in all kinds of axioms on bounds for notions we
do not intend to use *)
clone import DigitalSignatures as DS.
import Stateless.

(* We keep the input and output type of the hash function abstract *)
clone import PROM.FullRO as PRO.

(* We use a PROM to stay flexible, but the security games really only use the
"get" function of the random oracle *)
module type Hash = { 
  proc get (x : PRO.in_t) : PRO.out_t
}.

module type Hash_i = { 
  include Hash
  proc init() : unit
}.

(* Type of Schemes that require a Hash oracle *)
module type SchemeRO (H : Hash) = { include Scheme }.

(** EF-KOA game *)

module type Adv_EFKOA_RO(H : Hash) = {
  proc forge(pk : pk_t) : msg_t * sig_t { H.get }
}.

module EF_KOA_RO(S : SchemeRO, A : Adv_EFKOA_RO, H : Hash_i) = {
  proc main() : bool = {
    var r;
    H.init();
    r <@ Stateless.EF_KOA(S(H),A(H)).main();
    return r;
  }
}.

(** EF-CMA game *)

module type Adv_EFCMA_RO (H : Hash) (O : SOracle_CMA) = {
  proc forge(pk : pk_t) : msg_t * sig_t
}.

module EF_CMA_RO(S : SchemeRO, A : Adv_EFCMA_RO, H : Hash_i, O : Oracle_CMA) = {
  proc main() : bool = {
    var r;
    H.init();
    r <@ Stateless.EF_CMA(S(H),A(H),O).main();
    return r;
  }
}.

(* Helper to define Oracle_CMA instances *)
module BaseOracle = {
 var qs : msg_t list

  proc fresh(m : msg_t) : bool = {
    return ! m \in qs;
  }
  
  proc nr_queries() : int = {
    return size qs;
  }
}.    


(* Variant where the adversary gets only a single oracle *)

module type SOracle_CMAs = { 
  proc get (x : PRO.in_t) : PRO.out_t 
  proc sign(m : msg_t) : sig_t
}.

module type Adv_EFCMAs (O : SOracle_CMAs) = {
  proc forge(pk : pk_t) : msg_t * sig_t
}.

(* NOTE: The oracle type *must* take a [Scheme] rather than a
[SchemeRO] due to missing support for higher-order module
types. Otherwise, the sign oracle may not actually call the sign
procedure from the scheme *)

module type Oracle_CMAs (S : Scheme) (H : Hash) = { 
  proc init(sk_init : sk_t) : unit
  proc sign(m : msg_t) : sig_t
  proc fresh(m : msg_t) : bool 
  proc nr_queries() : int 
  proc get (x : PRO.in_t) : PRO.out_t 
}.

module (O_CMA_Default : Oracle_CMAs) (S : Scheme) (H : Hash) = {
  include var O_CMA_Default(S)
  proc get = H.get
}.

module EF_CMAs(S : SchemeRO, H : Hash_i, O : Oracle_CMAs, A : Adv_EFCMAs) = {
  proc main() : bool = {
    var pk : pk_t;
    var sk : sk_t;
    var m : msg_t;
    var sig : sig_t;
    var nrqs : int;
    var is_valid : bool;
    var is_fresh : bool;
    
    H.init();
    (pk, sk) <@ S(H).keygen();
    O(S(H),H).init(sk);
    (m, sig) <@ A(O(S(H),H)).forge(pk);
    is_valid <@ S(H).verify(pk, m, sig);
    is_fresh <@ O(S(H),H).fresh(m);
    nrqs <@ O(S(H),H).nr_queries();
    
    return nrqs <= q_efcma /\ is_valid /\ is_fresh;
  }
}.

(* Reduction *)

module Red_EFCMAs (A : Adv_EFCMA_RO) (O : SOracle_CMAs) = {
  module H = { proc get = O.get }
  module S = { proc sign = O.sign }

  proc forge (pk) = { 
    var r;
    r <@ A(H,S).forge(pk);
    return r;
  }
}.

section PROOF.

declare module H <: Hash_i{-Stateless.O_CMA_Default}.
declare module S <: SchemeRO{-Stateless.O_CMA_Default,-H}.
declare module A <: Adv_EFCMA_RO{-S,-Stateless.O_CMA_Default,-H}.

lemma EF_CMA_single_gen &m : 
  Pr [ EF_CMA_RO(S,A,H,Stateless.O_CMA_Default).main() @ &m : res ] = 
  Pr [ EF_CMAs(S,H,O_CMA_Default,Red_EFCMAs(A)).main() @ &m : res ].
proof.
byequiv (_ : ={glob A,glob S,glob H} ==> ={res}) => //; proc. inline{1} 2. 
inline{1} 7; inline{1} 6; inline{2} 7; inline{2} 6; wp.
conseq (: ={glob A,glob S,glob H} ==> ={glob H,glob Stateless.O_CMA_Default,is_valid,m}); 1: smt().
call(: ={glob H, glob Stateless.O_CMA_Default}). 
- by proc (={glob Stateless.O_CMA_Default}); auto.
conseq />. 
inline{2} 4; wp.
call(: ={glob Stateless.O_CMA_Default,glob S,glob H}); 1,2: by sim.
auto; conseq />.
by sim.
qed.

end section PROOF.
