require import AllCore Distr List StdOrder.
import RealOrder.

require import DistrExtras RealFLub.

type in_t, out_t.

op d : in_t -> out_t distr.

op alpha : real.

(* CD: phrasing the axiom in terms of p_max is a weak reason to pull in RealFLub *)

axiom d_pmax z : p_max (d z) <= alpha.

lemma d_max : forall z x, mu1 (d z) x <= alpha.
proof.
move => z x; apply: ler_trans (d_pmax z).
exact pmax_upper_bound.
qed.

op qs : { int | 0 <= qs } as qs_ge0.
op qg : { int | 0 <= qg } as qg_ge0.

module type SGOracle = { 
  proc sample (z : in_t) : unit
  proc guess (x : out_t) : unit
}.

module type Adversary (O:SGOracle) = { 
  proc run () : unit
}.

module type SGOracle_i = {
  include SGOracle
  proc init () : unit
}.

module SGO = { 
  var out : out_t list
  var win : bool

  proc init () = { 
    out <- []; 
    win <- false;
  }

  proc sample (z : in_t) = { 
    var x;
    x <$ d z; 
    out <- x :: out;    
  }

  proc guess (x : out_t) = { 
    if (x \in out) { win <- true; }
  }
}.

(* Counting Wrapper *)
module Count (O : SGOracle) : SGOracle = { 
  var cs, cg : int

  proc init () = { 
    cs <- 0;
    cg <- 0;
  }

  proc guess (x) = { 
    cg <- cg + 1;
    O.guess(x);
  }

  proc sample (z) = { 
    cs <- cs + 1;
    O.sample(z);
  }
}.

module SG_Game (A : Adversary) = { 
  proc main () = { 
    SGO.init();
    Count(SGO).init(); (* Add counting wrapper or not? *)
    A(Count(SGO)).run();
    return SGO.win /\ Count.cs <= qs /\ Count.cg <= qg;
  }
}.

(* Variant where the Adversary needs to output its guesses at the end *)

module type SOracle = {
  proc sample (z : in_t) : unit
}.

module type SAdversary (O : SOracle) = { 
  proc guess () : out_t list
}.

module type SOracle_i = {
  include SOracle
  proc init () : unit
  proc get_samples () : out_t list
}.

module SO = { 
  var out : out_t list

  proc init () = { 
    out <- []; 
  }

  proc sample (z : in_t) = { 
    var x;
    x <$ d z; 
    out <- x :: out;    
  }
}.

module SCount (O : SOracle) : SOracle = { 
  var cs : int

  proc init () = { 
    cs <- 0;
  }

  proc sample (z) = { 
    cs <- cs + 1;
    O.sample(z);
  }
}.

module S_Game (A : SAdversary) = { 
  proc main () = {
    var xs;
    SO.init();
    SCount(SO).init(); 
    xs <@ A(SCount(SO)).guess();
    return has (mem SO.out) xs /\ SCount.cs <= qs /\ size xs <= qg ;
  }
}.

section PROOF.

declare module A <: Adversary {-Count,-SGO,-SO,-SCount}.

local module (B : SAdversary) (O : SOracle) = { 
  var log : out_t list
  module O' = {
    proc sample = O.sample
    proc guess (x) = { log <- x :: log; }
  }
  proc guess () = { 
    log <- [];
    A(O').run();
    return log;
  } 
}.

local lemma SG_S &m : Pr [ SG_Game(A).main() @ &m : res ] <= Pr [ S_Game(B).main() @ &m : res ].
proof.
byequiv => //; proc; inline*; wp. 
call(: ={out}(SGO,SO) /\ 
       ={cs}(Count,SCount) /\ 
       (Count.cg{1} = size B.log{2}) /\ 
       (SGO.win{1} => has (mem SO.out{2}) B.log{2})).
- proc; inline*; auto => />; smt(has_sym).
- proc; inline*; auto => />; smt(has_sym).
by auto => /> /#.
qed.

local module SOl = { 
  var out : out_t list
  var log : in_t list

  proc init () = { 
    out <- [];
    log <- [];
  }

  proc sample (z : in_t) = { 
    var x;
    log <- z :: log;
    x <$ d z; 
    out <- x :: out;    
  }
}.

local module SOr = { 
  include var SOl [init]

  proc sample (z : in_t) = { 
    log <- z :: log;
  }
}.


local module S_Game_l (A : SAdversary) = { 
  proc main () = {
    var xs;
    SOl.init();
    SCount(SOl).init(); 
    SOl.out <$ djoinmap d SOl.log;
    xs <@ A(SCount(SOl)).guess();
    return has (mem SOl.out) xs /\ SCount.cs <= qs /\ size xs <= qg ;
  }
}.

local module S_Game_r (A : SAdversary) = { 
  proc main () = {
    var xs;
    SOr.init();
    SCount(SOr).init(); 
    xs <@ A(SCount(SOr)).guess();
    SOl.out <$ djoinmap d SOl.log;
    return has (mem SOl.out) xs /\ SCount.cs <= qs /\ size xs <= qg ;
  }
}.

local lemma Sl_Sr_guess (B <: SAdversary{-SCount,-SOl}) :
  eager[ SOl.out <$ djoinmap d SOl.log;,
         B(SCount(SOl)).guess ~ B(SCount(SOr)).guess,
         SOl.out <$ djoinmap d SOl.log; :
         ={glob B,glob SOl, glob SCount} ==> ={res,glob SCount,glob SOl}].
proof.
eager proc (H : SOl.out <$ djoinmap d SOl.log; ~ SOl.out <$ djoinmap d SOl.log; :
  ={glob SOl, glob SCount} ==> ={glob SOl, glob SCount})  (={glob SOl, glob SCount}); last first.
- sim. 
- sim. 
- auto. 
- auto. 
proc*. inline*. 
swap{1} 3 -2. swap{2} 2 -1. sp 1 1. 
conseq (: ={z,glob SOl} ==> ={glob SOl}) => //.
transitivity*{1} {
  x <$ d z; 
  SOl.out <$ djoinmap d SOl.log; 
  SOl.log <- z :: SOl.log;
  SOl.out <- x :: SOl.out;
}; 1,2: smt(); 1: by swap{1} [2..3] -1; swap{1} 5 -2; auto.
transitivity*{2} {
 SOl.log <- z :: SOl.log;
 SOl.out <$ djoinmap d SOl.log;
}; 1,2: smt(); last by auto.
wp. 
pose f (p : out_t * out_t list) := p.`1 :: p.`2.
pose g (s : out_t list) := (head witness s,behead s).
rnd f g : *0 *1.
auto => /> &m; split => [|_]; 1: smt(supp_dmap supp_djoin size_ge0).
split => [?|_].
- move/supp_dmap => [?]; rewrite djoin_cons /= supp_dmap /g /=.
  case => -[[x out]] /> /supp_dprod /= [? ?]. 
  rewrite !dmap1E /(\o) /pred1 /= (mu_eq _ _ (pred1 (x,out))) 1:/# dprod1E.
  rewrite (mu_eq _ _ (pred1 (x,out))) 1:/#. 
  by rewrite -dprod_dlet dprod1E /#.
move => [out' x']; rewrite /f /g /= supp_dlet /= => -[x [Hx]]. 
rewrite supp_dmap => -[out [Hout]] /> {out' x'}. 
rewrite djoin_cons /= supp_dmap; exists (x::out). 
rewrite supp_dmap; exists (x,out); smt(dprod1E).
qed.

local equiv Sl_Sr (B <: SAdversary{-SCount,-SOl}) : 
  S_Game_l(B).main ~ S_Game_r(B).main : ={glob B} ==> ={res}.
proc.
inline *.
seq 3 3 : (={glob B, glob SOl,SCount.cs}). auto. 
by eager call (Sl_Sr_guess B) => />.
qed.

local lemma S_Sr &m (B <: SAdversary{-SCount,-SO,-SOl,-Count}) : 
  Pr [ S_Game(B).main() @ &m : res ] <= Pr [ S_Game_r (B).main() @ &m : res ].
proof.
apply (ler_trans (Pr[ S_Game_l (B).main() @ &m : res ])). 
- byequiv => //; proc; inline*; wp. 
  call (: ={SCount.cs} /\ ={out}(SO,SOl)); 1: by sim. 
  auto => />; smt(weight_djoin_nil djoin_nil supp_dunit).
by byequiv => //; proc*; call (Sl_Sr B).
qed.

lemma SG_bound &m : Pr [ SG_Game(A).main() @ &m : res ] <= qs%r * qg%r * alpha.
proof.
apply: (ler_trans _ _ _ (SG_S &m) _).
apply: (ler_trans _ _ _ (S_Sr &m B) _).
byphoare => //; proc; inline*. 
swap 6 1; wp.
conseq (: _ ==> has (mem SOl.out) B.log /\ size SOl.log <= qs /\ size B.log <= qg)
       (: size SOl.log <= SCount.cs); 1: smt().
- rnd; call(: size SOl.log <= SCount.cs).
  + proc; inline*; auto => /> /#.
  + proc; inline*; auto => /> /#.
  auto => />.
seq 5 : (size SOl.log <= qs /\ size B.log <= qg) 
        1%r (qs%r * qg%r * alpha) 1%r 0%r => //; last by hoare; auto => />.
conseq />. rnd; skip => /> &1 log_qs log_qg. 

(* Ethan: The following `have` fails on my end for some reasons.
 * I rewrote the proof.
 *)
have ? : 0%r <= alpha.
  suff: mu1 (d witness) witness <= alpha by smt(ge0_mu).
  smt(d_max).

apply (ler_trans ((size B.log{1})%r * (qs%r * alpha))); last smt(qs_ge0 qg_ge0).
apply mu_has_leM => x x_log. 
apply (ler_trans _ _ _ (le_djoin_size (map d SOl.log{1}) x alpha _)).
- smt(mapP d_max).
- smt(size_map).
qed.

end section PROOF.

(** Variant with static query bound for A *)

module SG_GameS (A : Adversary) = { 
  proc main () = { 
    SGO.init();
    A(SGO).run();
    return SGO.win;
  }
}.

section STATIC.

declare module A <: Adversary{-Count,-SGO,-SO,-SCount}.

declare axiom A_bound : forall (O <: SGOracle{-A, -Count}), 
  hoare [ A(Count(O)).run : Count.cs = 0 /\ Count.cg = 0 ==> 
                            Count.cs <= qs /\ Count.cg <= qg ].

lemma SG_boundS &m : Pr [ SG_GameS(A).main() @ &m : res ] <= qs%r * qg%r * alpha.
proof.
apply: ler_trans (SG_bound A &m).
byequiv => //; proc. 
conseq (: ={glob A} ==> ={SGO.win}) _ 
       (: _ ==> Count.cs <= qs /\ Count.cg <= qg) => //.
- by call (A_bound SGO); inline*; auto.
by inline*; call(: ={glob SGO}); 1,2 : proc; inline*; auto.
qed.

end section STATIC.
