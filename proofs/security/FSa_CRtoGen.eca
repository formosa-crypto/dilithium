require import Int Real List FSet Distr RealExp SmtMap SDist StdOrder.
require import DistrExtras.
import RealOrder.

require DigitalSignaturesRO PROM.
require FSabort.

(* ID scheme types and definitions *)
clone import FSabort as FSa. 
import FSa.ID. 

(* Generic FS+abort construction (i.e. Sig = W*Z option *)
clone FSa.Generic as FSaG.

(* Commitment Recoverable FS+abort construction (i.e. Sig = C*Z option *)
clone FSa.CommRecov as FSaCR with
  op qS <= FSaG.qS.



module OCR (H : FSaG.DSS.Hash) (O : FSaG.DSS.DS.Stateless.SOracle_CMA) = { 
  proc sign(m : M) = { 
    var w,c,z;
    (w,z) <@ O.sign(m);
    c <@ H.get(w,m); 
    return (c,z);
  }
}.

module (RedFSaG (A : FSaCR.DSS.Adv_EFCMA_RO) : FSaG.DSS.Adv_EFCMA_RO) 
  (H : FSaG.DSS.Hash)
  (O : FSaG.DSS.DS.Stateless.SOracle_CMA) = { 

  proc forge(pk : PK) : M*FSaG.Sig = { 
    var w,c,z,m,sig,sig';
    (m,sig) <@ A(H,OCR(H,O)).forge(pk);
    (c,z) <- sig;
    w <- FSaCR.recover pk c z;
    sig' <- (w,z);
    return (m,sig');
  }
}.

section PROOF.

declare module P <: ID.Prover{
  -FSaG.DSS.DS.Stateless.O_CMA_Default, 
  -FSaCR.DSS.DS.Stateless.O_CMA_Default,
  -FSaG.DSS.PRO.RO,
  -FSaCR.DSS.PRO.RO
}.

declare module V <: ID.Verifier{-P,
  -FSaG.DSS.DS.Stateless.O_CMA_Default, 
  -FSaCR.DSS.DS.Stateless.O_CMA_Default,
  -FSaG.DSS.PRO.RO,
  -FSaCR.DSS.PRO.RO
}.

declare axiom verify_ll : islossless V.verify.

declare module A <: FSaCR.DSS.Adv_EFCMA_RO{
  -P,-V,
  -FSaG.DSS.DS.Stateless.O_CMA_Default, 
  -FSaCR.DSS.DS.Stateless.O_CMA_Default,
  -FSaG.DSS.PRO.RO,
  -FSaCR.DSS.PRO.RO
}.

module FSaCR_O_Default = FSaCR.DSS.DS.Stateless.O_CMA_Default.
module FSaG_O_Default = FSaG.DSS.DS.Stateless.O_CMA_Default.

lemma FSa_CommRecov_Generic &m : 
    Pr [ FSaCR.DSS.EF_CMA_RO(FSaCR.IDS_Sig(P,V),A,FSaCR.DSS.PRO.RO,FSaCR_O_Default).main() @ &m : res ] 
<=  Pr [ FSaG.DSS.EF_CMA_RO(FSaG.IDS_Sig(P,V),RedFSaG(A),FSaG.DSS.PRO.RO,FSaG_O_Default).main() @ &m : res ].
proof.
byequiv => //; proc.  
inline{1} 2; inline{2} 2; inline{2} 4. 
seq 4 5 : (={glob P,glob V,pk} /\ m{1} = m0{2} /\ sig{1} = sig0{2} /\ pk{1} = pk0{2}
           /\ ={qs,sk}(FSaCR_O_Default,FSaG_O_Default) 
           /\ ={m}(FSaCR.DSS.PRO.RO,FSaG.DSS.PRO.RO)
          ); last first. 
- inline*. wp. sp.
  seq 1 1 : (#pre /\ ={r0}); first by auto.
  seq 2 2 : (#pre /\ c'{1} = c0{2}); first by if; auto.
  if{1}; first by call(: true); auto.
  conseq (:_ ==> true); 1: smt().
  by islossless; apply verify_ll. 
inline*. conseq />.
call(: ={glob P} 
       /\ ={qs,sk}(FSaCR_O_Default,FSaG_O_Default) 
       /\ ={m}(FSaCR.DSS.PRO.RO,FSaG.DSS.PRO.RO)); first last.
- by sim.
- by auto; call(: true); auto => />.
proc. inline{1} 1. inline{2} 1. inline{2} 2. 
swap{2} 9 2; wp; sp; conseq />.
seq 1 1 : (={sk,oz,glob P} /\ w{1} = w0{2} /\ c{1} = c0{2} /\ m0{1} = m1{2} /\ (m = m1){2} /\
           ={m}(FSaCR.DSS.PRO.RO,FSaG.DSS.PRO.RO) /\ 
           (Some c0 = FSaG.DSS.PRO.RO.m.[w0,m1]){2} ).
- while (#[:-2]post /\ (oz <> None => Some c0 = FSaG.DSS.PRO.RO.m.[w0,m1]){2}); 
    last by auto => /> /#.  
  inline*; call(: true); auto; call(: true); auto => />. 
  smt(domE get_set_sameE).
inline*. rcondf{2} ^if; first by auto => />; smt(domE get_set_sameE).
by auto => />; smt(get_set_sameE).
qed.

end section PROOF.
