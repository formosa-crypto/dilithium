(* Formalization of the *decisional* MLWE problem. *)
(* That is, distinguishing between (A, As1 + s2) and (A, t) for random t. *)

require import AllCore Distr IntDiv.
require (*--*) Mat.

(* Mat alreary requires that the underlying carrier is a ComRing *)
clone import Mat as M.

op k : { int | 0 < k } as gt0_k.
op l : { int | 0 < k } as gt0_l.

op dR : R distr.
op dS : R distr. 

module type Adversary = {
  proc distinguish(mA: matrix, t: vector) : bool
}.

module GameL(A: Adversary) = {
  proc main() = {
    var mA, s1, s2, result;
    mA <$ dmatrix dR k l;
    s1 <$ dvector dS l;
    s2 <$ dvector dS k;
    result <@ A.distinguish(mA, mA *^ s1 + s2);
    return result;
  }
}.

module GameR(A: Adversary) = {
  proc main() = {
    var mA, t, result;
    mA <$ dmatrix dR k l;
    t <$ dvector dR k;
    result <@ A.distinguish(mA, t);
    return result;
  }
}.
