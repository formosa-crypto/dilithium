(* -------------------------------------------------------------------- *)
require import AllCore List Distr Perms.
require (*--*) Subtype Monoid Ring Subtype Bigalg StdOrder StdBigop.

import StdOrder.IntOrder StdBigop.Bigreal.

(* -------------------------------------------------------------------- *)
clone import Ring.ComRing as ZR.

(* -------------------------------------------------------------------- *)
clone import Bigalg.BigComRing as Big with theory CR <- ZR.

type R = t.

import BAdd.

(* -------------------------------------------------------------------- *)
op in_size :  { int | 0 <= in_size } as ge0_in_size.
op out_size :  { int | 0 <= out_size } as ge0_out_size.

hint exact : ge0_in_size.
hint exact : ge0_out_size.

(* -------------------------------------------------------------------- *)

theory Vector.
op size : {int | 0 <= size} as ge0_size.
type vector.
op tofunv : vector -> (int -> R).
op offunv : (int -> R) -> vector.

op prevector (f : int -> R) =
  forall i, !(0 <= i < size) => f i = zeror.

op vclamp (v : int -> R) : int -> R =
  fun i => if 0 <= i < size then v i else zeror.

axiom tofunv_prevector (v : vector) : prevector (tofunv v).
axiom tofunvK : cancel tofunv offunv.
axiom offunvK : forall v, tofunv (offunv v) = vclamp v.

op "_.[_]" (v : vector) (i : int) = tofunv v i.

lemma offunvE (v : int -> R) (i : int) : 0 <= i < size =>
  (offunv v).[i] = v i.
proof. by rewrite /("_.[_]") offunvK /vclamp => ->. qed.

lemma getv_out (v : vector) (i : int) :
  !(0 <= i < size) => v.[i] = zeror.
proof. by move/(tofunv_prevector v). qed.

lemma eq_vectorP (v1 v2 : vector) :
  (v1 = v2) <=> (forall i, 0 <= i < size => v1.[i] = v2.[i]).
proof. split=> [->//|eq_vi].
have: vclamp (tofunv v1) = vclamp (tofunv v2).
+ by apply/fun_ext=> j @/vclamp; case: (0 <= j < size); try apply: eq_vi.
by rewrite -!offunvK !tofunvK => /(congr1 offunv); rewrite !tofunvK.
qed.

lemma vectorW (P : vector -> bool) :
  (forall f, prevector f => P (offunv f)) =>
    forall v, P v.
proof. by move=> ih v; rewrite -(tofunvK v) &(ih) tofunv_prevector. qed.

op vectc c = offunv (fun _ => c).

abbrev zerov = vectc zeror.

lemma offunCE c i : 0 <= i < size => (vectc c).[i] = c.
proof. by move=> ?; rewrite offunvE. qed.

lemma offun0E i : zerov.[i] = zeror.
proof. by rewrite /("_.[_]") offunvK /vclamp if_same. qed.

hint simplify offun0E, offunCE.

op (+) (v1 v2 : vector) = offunv (fun i => v1.[i] + v2.[i]).
op [-] (v     : vector) = offunv (fun i => -v.[i]).

lemma offunD (v1 v2 : vector) i :
  (v1 + v2).[i] = v1.[i] + v2.[i].
proof.
case: (0 <= i < size) => [|/getv_out vi_eq0].
+ by move=> rg_i; rewrite offunvE.
+ by rewrite !vi_eq0 add0r.
qed.

hint simplify offunD.

lemma offunN (v : vector) i : (-v).[i] = - v.[i].
proof.
case: (0 <= i < size) => [|/getv_out vi_eq0]; last by rewrite !vi_eq0 oppr0.
by move=> rg_i; rewrite offunvE.
qed.

hint simplify offunN.

clone import Ring.ZModule with type t <- vector,
  op zeror <- Vector.zerov,
  op (+)   <- Vector.( + ),
  op [-]   <- Vector.([-])
proof *.

realize addrA. proof.
move=> /vectorW v1 h1 /vectorW v2 h2 /vectorW v3 h3.
by apply/eq_vectorP=> i hi; do! rewrite offunvE //=; rewrite addrA.
qed.

realize addrC. proof.
move=> /vectorW v1 h1 /vectorW v2 h2; apply/eq_vectorP.
by move=> i hi /=; rewrite addrC.
qed.

realize add0r. proof.
by move=> /vectorW f hf; apply/eq_vectorP=> i hi /=; rewrite add0r.
qed.

realize addNr. proof.
by move=> /vectorW f hf; apply/eq_vectorP=> i hi /=; rewrite addNr.
qed.

lemma offunB (v1 v2 : vector) i : (v1 - v2).[i] = v1.[i] - v2.[i].
proof. done. qed.

op dotp (v1 v2 : vector) =
  bigi predT (fun i => v1.[i] * v2.[i]) 0 size.

lemma dotpC : commutative dotp.
proof.
by move=> v1 v2; apply: eq_bigr=> i _ /=; rewrite mulrC.
qed.

lemma dotpDr v1 v2 v3 : dotp v1 (v2 + v3) = dotp v1 v2 + dotp v1 v3.
proof.
by rewrite /dotp -big_split &(eq_bigr) => i _ /=; rewrite mulrDr.
qed.

lemma dotpDl v1 v2 v3 : dotp (v1 + v2) v3 = dotp v1 v3 + dotp v2 v3.
proof. by rewrite dotpC dotpDr !(dotpC v3). qed.

op scalev a v = offunv (fun i => a * v.[i]).

abbrev ( ** ) = scalev.

lemma scalevE a v i : (a ** v).[i] = a * v.[i].
proof.
case: (0 <= i < size) => ?; first smt(offunvK tofunvK).
by rewrite !getv_out // mulr0.
qed.

lemma scalevDl (a b : t) (v : vector) :
  (a + b) ** v = a ** v + b ** v.
proof.
by apply/eq_vectorP=> *; rewrite offunD !scalevE // mulrDl.
qed.

lemma scalevDr (a : t) (v w : vector) :
  a ** (v + w) = a ** v + a ** w.
proof.
by apply/eq_vectorP=> *; rewrite !(offunD, scalevE) mulrDr.
qed.

lemma scalevA (a b : t) (v : vector) :
  (a * b) ** v = a ** (b ** v).
proof.
by apply/eq_vectorP => *; rewrite !scalevE mulrA.
qed.

lemma scalevAC (a b : t) (v : vector) :
  a ** (b ** v) = b ** (a ** v).
proof. by rewrite -!scalevA [b*a]mulrC. qed.


(* -------------------------------------------------------------------- *)
op dvector (d : R distr) =
  dmap (djoin (nseq size d)) (fun xs => offunv (nth witness xs)).

lemma dvector1E (d : R distr) (v : vector) : mu1 (dvector d) v =
  BRM.bigi predT (fun i => mu1 d v.[i]) 0 size.
proof.
(* Proof broken for unknown reasons... *)
(*
pose g v := mkseq (tofunv v) size; rewrite (@dmap1E_can _ _ g).
+ move=> {v} @/g v; apply/eq_vectorP=> /= i rgi.
  by rewrite offunvE -1:nth_mkseq.
+ move=> xs xs_d @/g; rewrite offunvK -(eq_in_mkseq (nth witness xs)).
  * by move=> i rgi @/vclamp; rewrite rgi.
  rewrite (_ : size = size xs) -1:mkseq_nth //.
  have := supp_djoin_size _ _ xs_d; rewrite size_nseq ler_maxr //.
  exact ge0_size.
rewrite djoin1E size_nseq size_mkseq /= (BRM.big_nth witness) predTofV.
pose sz := size _; have szE: size = sz; first rewrite /sz.
+ by rewrite size_zip size_nseq size_mkseq minrE /= ler_maxr.
rewrite szE !BRM.big_seq &(BRM.eq_bigr) => /= i /mem_range rgi @/(\o); congr.
+ rewrite (nth_change_dfl (witness, witness)) // -szE //.
  by rewrite nth_zip ?(size_nseq, size_mkseq) //= nth_nseq // szE.
+ congr; rewrite (nth_change_dfl (witness, witness)) // -szE //.
  by rewrite nth_zip ?(size_nseq, size_mkseq) //= nth_mkseq // szE.
qed.
*)
admitted.

lemma dvector_uni d : is_uniform d => is_uniform (dvector d).
proof.
(* Proof broken... *)
(*
move=> uni_d; apply/dmap_uni_in_inj/djoin_uni.
- move=> xs ys /supp_djoin[+ _] /supp_djoin[+ _] /=.
  rewrite !size_nseq !ler_maxr // => ??.
  move/(congr1 tofunv); rewrite !offunvK => eqv.
  apply/(eq_from_nth witness) => [/#|i rg_i].
  by move/fun_ext/(_ i): eqv => /#.
- by move=> d'; rewrite mem_nseq => -[_ <-].
qed.
*)
admitted.

lemma dvector_ll d : is_lossless d => is_lossless (dvector d).
proof.
move=> ll_d; apply/dmap_ll/djoin_ll.
by move=> d'; rewrite mem_nseq => -[_ <-].
qed.

lemma dvector_fu d : is_full d => is_full (dvector d).
proof.
(* Broken. *)
(*
move=> full_d; apply/dmap_fu_in => v.
exists (map (fun i => v.[i]) (range 0 size)); split=> /=.
- apply/supp_djoin; rewrite size_nseq ler_maxr // size_map.
  rewrite size_range /= ler_maxr //=; apply/allP.
  case=> d' x /mem_zip []; rewrite mem_nseq => -[_ <<-] /= _.
  by apply: full_d.  
- apply/eq_vectorP=> i rg_i; rewrite offunvE //.
  by rewrite (nth_map witness) -1:nth_range // size_range ler_maxr.
qed.
*)
admitted.

lemma dvector_funi d : is_full d => is_uniform d =>
  is_funiform (dvector d).
proof.
move=> ??; apply/is_full_funiform => //.
- by apply/dvector_fu.
- by apply/dvector_uni.
qed.

end Vector.

clone import Vector as VecIn with
  op size <- in_size
proof ge0_size by exact ge0_in_size.

clone import Vector as VecOut with
  op size <- out_size
proof ge0_size by exact ge0_out_size.

type vec_in = VecIn.vector.
type vec_out = VecOut.vector.

(* -------------------------------------------------------------------- *)
theory Matrix.
type matrix.

op tofunm : matrix -> (int -> int -> R).
op offunm : (int -> int -> R) -> matrix.

abbrev mrange (i j : int) =
  0 <= i < out_size /\ 0 <= j < in_size.

lemma nosmt mrangeL i j : mrange i j => 0 <= i < out_size.
proof. by case. qed.

lemma nosmt mrangeR i j : mrange i j => 0 <= j < in_size.
proof. by case. qed.

op prematrix (f : int -> int -> R) =
  forall i j, !mrange i j => f i j = zeror.

op mclamp (m : int -> int -> R) : int -> int -> R =
  fun i j : int => if mrange i j then m i j else zeror.

axiom tofunm_prematrix (m : matrix) : prematrix (tofunm m).
axiom tofunmK : cancel tofunm offunm.
axiom offunmK : forall m, tofunm (offunm m) = mclamp m.

op "_.[_]" (m : matrix) (ij : int * int) = tofunm m ij.`1 ij.`2.

lemma offunmE (m : int -> int -> R) (i j : int) :
  mrange i j => (offunm m).[i, j] = m i j.
proof. by rewrite /"_.[_]" offunmK /mclamp => -[-> ->]. qed.

lemma getm_out (m : matrix) (i j : int) :
  !mrange i j => m.[i, j] = zeror.
proof. by move/(tofunm_prematrix m). qed.

lemma getm_outL (m : matrix) (i j : int) :
  !(0 <= i < out_size) => m.[i, j] = zeror.
proof. by move=> Nrg; rewrite getm_out // negb_and Nrg. qed.

lemma getm_outR (m : matrix) (i j : int) :
  !(0 <= j < in_size) => m.[i, j] = zeror.
proof. by move=> Nrg; rewrite getm_out // negb_and Nrg. qed.

lemma eq_matrixP (m1 m2 : matrix) :
  (m1 = m2) <=> (forall i j, mrange i j => m1.[i, j] = m2.[i, j]).
proof. split=> [->//|eq_mi].
have: mclamp (tofunm m1) = mclamp (tofunm m2).
+ by apply/fun_ext2 => i j @/mclamp; case _: (mrange _ _) => //= /eq_mi.
by rewrite -!offunmK !tofunmK => /(congr1 offunm); rewrite !tofunmK.
qed.

lemma matrixW (P : matrix -> bool) :
  (forall f, prematrix f => P (offunm f)) =>
    forall v, P v.
proof. by move=> ih m; rewrite -(tofunmK m) &(ih) tofunm_prematrix. qed.

op matrixc (c : R) = offunm (fun _ _ => c).

abbrev zerom = matrixc zeror.
(* oh... not a ring, is it? *)
(* abbrev onem  = diagc   oner . *)

lemma offunCE c i j : mrange i j => (matrixc c).[i, j] = c.
proof. by move=> -[??]; rewrite offunmE. qed.

lemma offun0E i j : zerom.[i, j] = zeror.
proof. by rewrite /matrixc /"_.[_]" offunmK /mclamp if_same. qed.

hint simplify offun0E, offunCE.

op (+) (m1 m2 : matrix) = offunm (fun i j => m1.[i, j] + m2.[i, j]).
op [-] (m     : matrix) = offunm (fun i j => -m.[i, j]).

lemma offunD (m1 m2 : matrix) i j :
  (m1 + m2).[i, j] = m1.[i, j] + m2.[i, j].
proof.
case: (mrange i j) => [|/getm_out mi_eq0].
+ by move=> rg_i; rewrite offunmE.
+ by rewrite !mi_eq0 addr0.
qed.

hint simplify offunD.

lemma offunN (m : matrix) i j : (-m).[i, j] = - m.[i, j].
proof.
case: (mrange i j) => [|/getm_out mi_eq0].
+ by move=> rg_i; rewrite offunmE.
+ by rewrite !mi_eq0 oppr0.
qed.

hint simplify offunN.

clone import Ring.ZModule with type t <- matrix,
  op zeror <- Matrix.zerom,
  op (+)   <- Matrix.( + ),
  op [-]   <- Matrix.([-])
proof *.

realize addrA. proof.
move=> /matrixW v1 h1 /matrixW v2 h2 /matrixW v3 h3.
by apply/eq_matrixP=> i j hij; do! rewrite offunmE //=; rewrite addrA.
qed.

realize addrC. proof.
move=> /matrixW v1 h1 /matrixW v2 h2; apply/eq_matrixP.
by move=> i j hij /=; rewrite addrC.
qed.

realize add0r. proof.
by move=> /matrixW f hf; apply/eq_matrixP=> i j hij /=; rewrite add0r.
qed.

realize addNr. proof.
by move=> /matrixW f hf; apply/eq_matrixP=> i j hij /=; rewrite addNr.
qed.

lemma offunB (m1 m2 : matrix) i j : (m1 - m2).[i, j] = m1.[i, j] - m2.[i, j].
proof. done. qed.

print bigi.

(* bigi (P : int -> bool) (F : int -> t) (i j : int) : t *)

op ( *^ ) (m : matrix) (v : vec_in) : vec_out =
  VecOut.offunv (fun i => bigi predT (fun j => m.[i, j] * v.[j]) 0 in_size).

lemma mulmxv0 (m : matrix) : m *^ VecIn.zerov = VecOut.zerov.
proof.
apply/eq_vectorP => i rgi; rewrite !offunvE //=.
by rewrite big1 // => /= j _; rewrite mulr0.
qed.

lemma mulmxvDl (m1 m2 : matrix) (v : vec_in) :
  (m1 + m2) *^ v = m1 *^ v + m2 *^ v.
proof.
apply/eq_vectorP=> i rgi /=; rewrite !offunvE //=.
by rewrite -big_split &(eq_bigr) => /= j _; rewrite mulrDl.
qed.

lemma mulmxvDr (m : matrix) (v1 v2 : vec_in) :
  m *^ (v1 + v2) = m *^ v1 + m *^ v2.
proof.
apply/eq_vectorP=> i rgi /=; rewrite !offunvE //=.
by rewrite -big_split &(eq_bigr) => /= j _; rewrite mulrDr.
qed.

lemma mulmxvE (m : matrix) (v : vec_in) i :
  (m *^ v).[i] = bigi predT (fun j => m.[i, j] * v.[j]) 0 in_size.
proof.
case: (0 <= i < out_size) => [rg_i|rgN_i]; first by rewrite offunvE.
by rewrite getv_out // big1 //= => j _; rewrite getm_outL // mul0r.
qed.

op colmx (v : vec_out) : matrix = offunm (fun i _ => v.[i]).
op rowmx (v : vec_in) : matrix = offunm (fun _ j => v.[j]).

lemma colmxE (v : vec_out) i j : 0 <= j < in_size => (colmx v).[i, j] = v.[i].
proof.
move=> rg_j; case: (0 <= i < out_size) => [rg_i|rgN_i]; last first.
+ by rewrite getv_out // getm_outL.
+ by rewrite offunmE.
qed.

lemma rowmxE (v : vec_in) i j : 0 <= i < out_size => (rowmx v).[i, j] = v.[j].
proof.
(* Relies on facts about transposes... *)
(* by move=> rg_i; rewrite -colmxT trmxE colmxE. qed. *)
admitted.

(* -------------------------------------------------------------------- *)
op dmatrix (d : R distr) =
  dmap
    (djoin (nseq out_size (djoin (nseq in_size d))))
    (fun xs : R list list => offunm (fun i j =>
      nth witness (nth witness xs j) i
    )).

lemma dmatrix1E (d : R distr) (m : matrix) : mu1 (dmatrix d) m =
  BRM.bigi predT (fun i => BRM.bigi predT (fun j => mu1 d m.[i, j]) 0 in_size) 0 out_size.
proof.
(* Broken. *)
(*
pose g m := mkseq (fun j => mkseq (fun i => tofunm m i j) size) size.
rewrite BRM.exchange_big (@dmap1E_can _ _ g).
+ move=> {m} @/g m; apply/eq_matrixP=> /= i j rg.
  rewrite offunmE //= nth_mkseq 1:(mrangeR _ _ rg) /=.
  by rewrite nth_mkseq 1:(mrangeL _ _ rg).
+ move=> xs xs_d @/g; rewrite offunmK; have szE: size = size xs.
  * by rewrite (supp_djoin_size _ _ xs_d) size_nseq ler_maxr.
  rewrite szE -(eq_in_mkseq (nth witness xs)) -1:mkseq_nth //=.
  move=> i rgi; rewrite -(eq_in_mkseq (nth witness (nth witness xs i))).
  * by move=> j rgj; rewrite /mclamp szE rgi /= rgj.
  pose s := nth _ xs i; rewrite -{1}(mkseq_nth witness s).
  congr => @/s; rewrite -szE; move/supp_djoin: xs_d.
  case=> _ /allP /(_ (djoin (nseq size d), s) _) /=.
  * pose r := zip _ _; pose x := (_, _); have szrE: size r = size xs.
    - by rewrite size_zip size_nseq ler_maxr // szE minrE.
    suff ->: x = nth witness r i by apply: mem_nth; rewrite szrE.
    rewrite (nth_change_dfl (witness, witness)) 1:szrE //.
    rewrite nth_zip;first by rewrite size_nseq ler_maxr.
    by rewrite nth_nseq 1:szE.
  by move/supp_djoin_size => ->; rewrite size_nseq ler_maxr.
rewrite djoin1E size_nseq size_mkseq /= (BRM.big_nth witness) predTofV.
pose sz := size _; have szE: size = sz; first rewrite /sz.
+ by rewrite size_zip size_nseq size_mkseq minrE /= ler_maxr.
rewrite !szE !BRM.big_seq &(BRM.eq_bigr) => /= i /mem_range rgi @/(\o).
rewrite (nth_change_dfl (witness, witness)) // -szE //.
rewrite nth_zip /= ?(size_nseq, size_mkseq) //=.
rewrite nth_nseq 1:szE // nth_mkseq 1:szE //=.
rewrite djoin1E size_nseq size_mkseq /= (BRM.big_nth witness) predTofV.
pose sz' := size _; have sz'E: size = sz'; first rewrite /sz'.
+ by rewrite size_zip size_nseq size_mkseq minrE //= ler_maxr.
rewrite !sz'E !BRM.big_seq &(BRM.eq_bigr) => /= j /mem_range rgj @/(\o).
rewrite (nth_change_dfl (witness, witness)) // -sz'E //.
rewrite nth_zip ?(size_nseq, size_mkseq) //= nth_nseq 1:sz'E //.
by rewrite nth_mkseq 1:sz'E.
qed.
*)
admitted.

lemma dmatrix_dvector d : dmatrix d =
  dmap (djoin (nseq in_size (VecIn.dvector d))) 
    (fun vs : vec_in list => offunm (fun i j => (nth witness vs j).[i])).
proof.
(* Broken. *)
(*
apply/eq_distr=> m; rewrite !dmap1E.
pose F (xs : R list list) :=
  offunm (fun i j => nth witness (nth witness xs j) i).
pose G (vs : vector list) :=
  offunm (fun i j => (nth witness vs j).[i]).
pose H (vs : vector list) :=
  map (fun v : vector => map (fun i => v.[i]) (range 0 size)) vs.
have eq: forall xs, size xs = size => G xs = (F \o H) xs.
- move=> xs eq_sz @/F @/G @/H @/(\o) /=; apply/eq_matrixP.
  move=> i j rg_ij; rewrite !offunmE //=.
  rewrite (nth_map witness) /= 1:/# (nth_map witness).
  - by rewrite size_range ler_maxr //#.
  by rewrite nth_range 1:/#.
rewrite -(@mu_eq_support _ (pred1 m \o (F \o H))).
- move=> xs /supp_djoin [+ _]; rewrite size_nseq ler_maxr //.
  by move/eq_sym => /eq @/(\o) <-.
rewrite -(dmap1E _ (F \o H)) -dmap_comp dmap1E; congr.
rewrite djoin_dmap_nseq; do 2! congr; rewrite /dvector.
rewrite dmap_comp /(\o) /= dmap_id_eq_in // => xs.
move=> /supp_djoin [+ _]; rewrite size_nseq ler_maxr //= => sz_xs.
apply/(eq_from_nth witness).
- by rewrite size_map size_range ler_maxr.
move=> i; rewrite size_map size_range ler_maxr //= => rg_i.
rewrite (nth_map witness) 1:!(size_range, ler_maxr) //.
by rewrite nth_range //= offunvE.
qed.
*)
admitted.

lemma dmatrix_uni d : is_uniform d => is_uniform (dmatrix d).
proof.
(* guess what... *)
(*
move=> uni_d; apply/dmap_uni_in_inj/djoin_uni.
- move=> xs ys /supp_djoin [+ xsin] /supp_djoin[+ ysin] /=.
  rewrite !size_nseq !ler_maxr // => sz_xs sz_ys.
  move/(congr1 tofunm); rewrite !offunmK => eqv.
  apply/(eq_from_nth witness) => [/#|j rg_j].
  have gt0_size: 0 < size by smt().
  pose xss := nth witness xs j; pose yss := nth witness ys j.
  pose ds  := djoin (nseq size d).
  move/allP/(_ (ds, xss) _): xsin => /= => [|xss_ds].
  - by rewrite {1}sz_xs; apply/mem_zip_nseqL/mem_nth.
  move/allP/(_ (ds, yss) _): ysin => /= => [|yss_ds].
  - by rewrite {1}sz_ys; apply/mem_zip_nseqL/mem_nth => /#.
  move/supp_djoin: xss_ds => [+ /allP ?].
  move/supp_djoin: yss_ds => [+ /allP ?].
  rewrite !size_nseq !ler_maxr // => sz_yss sz_xss.
  apply/(eq_from_nth witness) => [/#|i rg_i].
  move/fun_ext2/(_ i j): eqv => @/mclamp /=.
  rewrite -sz_xs in rg_j; rewrite -sz_xss in rg_i.
  by rewrite rg_i rg_j /=.
- move=> ds; rewrite mem_nseq => -[_ <-].
  by apply/djoin_uni=> ?; rewrite mem_nseq => -[_ <-].
qed.
*)
admitted.

lemma dmatrix_ll d : is_lossless d => is_lossless (dmatrix d).
proof.
move=> ll_d; apply/dmap_ll/djoin_ll.
move=> ds; rewrite mem_nseq => -[_ <-].
by apply/djoin_ll=> ?; rewrite mem_nseq => -[_ <-].
qed.

lemma dmatrix_fu d : is_full d => is_full (dmatrix d).
proof.
(* of course everything's broken... *)
(*
move=> full_d; apply/dmap_fu_in => m; pose ns := range 0 size.
exists (map (fun j => map (fun i => m.[i, j]) ns) ns); split=> /=.
- apply/supp_djoin; rewrite size_nseq ler_maxr // size_map.
  rewrite size_range /= ler_maxr //=; apply/allP.
  case=> d' x /mem_zip []; rewrite mem_nseq => -[_ <<-] /=.
  case/mapP=> /= i [/mem_range rg_i ->]; apply/djoin_fu.
  - by rewrite size_map size_nseq ler_maxr // size_range ler_maxr.
  - by move=> ? y; rewrite mem_nseq => -[_ <-]; apply: full_d.
- apply/eq_matrixP=> i j [rg_i rg_j]; rewrite offunmE //=.
  rewrite (nth_map witness) -1:nth_range //=.
  - by rewrite size_range ler_maxr.
  by rewrite (nth_map witness) -1:nth_range //= size_range ler_maxr.
qed.
*)
admitted.

lemma dmatrix_funi d : is_full d => is_uniform d =>
  is_funiform (dmatrix d).
proof.
move=> ??; apply/is_full_funiform => //.
- by apply/dmatrix_fu.
- by apply/dmatrix_uni.
qed.

end Matrix.

export Matrix.
